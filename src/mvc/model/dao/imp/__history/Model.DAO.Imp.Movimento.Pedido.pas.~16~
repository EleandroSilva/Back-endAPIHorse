{*******************************************************}
{                    API PDV - JSON                     }
{                      Be More Web                      }
{          Início do projeto 26/04/2024 12:56           }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2024                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit Model.DAO.Imp.Movimento.Pedido;

interface

uses
  Data.DB,
  Uteis.Tratar.Mensagens,
  System.SysUtils,

  Model.DAO.Movimento.Pedido.Interfaces,
  Model.Entidade.Movimento.Pedido.Interfaces,
  Model.Conexao.Firedac.Interfaces,
  Model.Conexao.Query.Interfaces;

type
  TDAOMovimentoPedido = class(TInterfacedObject, iDAOMovimentoPedido)
    private
      FMovimentoPedido : iEntidadeMovimentoPedido<iDAOMovimentoPedido>;
      FConexao : iConexao;
      FQuery   : iQuery;
      FMSG     : TMensagens;

      FDataSet : TDataSet;
   const
      FSQL=('select '+
            'mp.id, '+
            'mp.idempresa, '+
            'mp.idpedido, '+
            'p.datahoraemissao, '+
            'p.valorproduto, '+
            'p.valordesconto, '+
            'p.valorreceber, '+
            'p.idusuario as idusuariopedido, '+
            'mp.idusuario, '+
            'mp.datahoraemissao, '+
            'mp.status, '+
            'case '+
            '  when mp.status = 0 then ''Pedido inserido'' '+
            '  when mp.status = 1 then ''Pedido alterado'' '+
            '  when mp.status = 2 then ''Pedido cancelad'' '+
            '  when mp.status = 3 then ''Pedido excluído'' '+
            'end tipomovimento '+
            'from movimentopedido mp '+
            'inner join empresa e on mp.idempresa = e.Id '+
            'inner join usuario u on mp.idusuario = u.id '+
            'inner join pedido  p on mp.idpedido  = p.id  '
           );
      function LoopRegistro (Value : Integer): Integer;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iDAOMovimentoPedido;

      function DataSet(DataSource : TDataSource) : iDAOMovimentoPedido; overload;
      function DataSet                           : TDataSet;            overload;
      function GetAll                            : iDAOMovimentoPedido;
      function GetbyId(Id : Variant)             : iDAOMovimentoPedido;
      function GetbyParams                       : iDAOMovimentoPedido;
      function Post                              : iDAOMovimentoPedido;
      function Put                               : iDAOMovimentoPedido;
      function Delete                            : iDAOMovimentoPedido;
      function QuantidadeRegistro                : Integer;

      function This : iEntidadeMovimentoPedido<iDAOMovimentoPedido>;
  end;

implementation

uses
  Model.Entidade.Imp.Movimento.Pedido,
  Model.Conexao.Firedac.MySQL.Imp,
  Model.Conexao.Query.Imp;

{ TDAOMovimentoPedido }

constructor TDAOMovimentoPedido.Create;
begin
  FMovimentoPedido := TEntidadeMovimentoPedido<iDAOMovimentoPedido>.New(Self);
  FConexao := TModelConexaoFiredacMySQL.New;
  FQuery   := TQuery.New;
  FMSG     := TMensagens.Create;
end;

destructor TDAOMovimentoPedido.Destroy;
begin
  FreeAndNil(FMSG);
  inherited;
end;

class function TDAOMovimentoPedido.New: iDAOMovimentoPedido;
begin
  Result := Self.Create;
end;

function TDAOMovimentoPedido.DataSet(DataSource: TDataSource): iDAOMovimentoPedido;
begin
  Result := Self;
  if not Assigned(FDataset) then
    DataSource.DataSet := FQuery.DataSet
  else
    DataSource.DataSet := FDataSet;
end;

function TDAOMovimentoPedido.DataSet: TDataSet;
begin
  Result := FDataSet;
end;

function TDAOMovimentoPedido.GetAll: iDAOMovimentoPedido;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL)
                    .Open
                  .DataSet;
    except
      on E: Exception do
      raise Exception.Create(FMSG.MSGerroGet+E.Message);
    end;
  finally
    if not FDataSet.IsEmpty then
      FMovimentoPedido.Id(FDataSet.FieldByName('id').AsInteger)
    else
      FMovimentoPedido.Id(0);
  end;
end;

function TDAOMovimentoPedido.GetbyId(Id: Variant): iDAOMovimentoPedido;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL)
                    .Add('where u.Id=:Id ')
                    .Params('Id', Id)
                    .Open
                  .DataSet;
    except
      on E: Exception do
      raise Exception.Create(FMSG.MSGerroGet+E.Message);
    end;
  finally
    if not FDataSet.IsEmpty then
      FMovimentoPedido.Id(FDataSet.FieldByName('id').AsInteger)
    else
      FMovimentoPedido.Id(0);
  end;
end;

function TDAOMovimentoPedido.GetbyParams: iDAOMovimentoPedido;
begin
  Result := Self;
  try
   try
     FDataSet := FQuery
                   .SQL(FSQL)
                   .Add('mp.idpedido=:idpedido')
                   .Params('idpedido', FMovimentoPedido.IdPedido)
                   .Open
                 .DataSet;
   except
     on E: Exception do
     raise exception.Create(FMSG.MSGerroGet+E.Message);
   end;
  finally
    if not FDataSet.IsEmpty then
    begin
      FMovimentoPedido.Id(FDataSet.FieldByName('id').AsInteger);
      QuantidadeRegistro;
    end
    else
      FMovimentoPedido.Id(0);
  end;
end;

function TDAOMovimentoPedido.Post: iDAOMovimentoPedido;
begin

end;

function TDAOMovimentoPedido.Put: iDAOMovimentoPedido;
begin

end;

function TDAOMovimentoPedido.Delete: iDAOMovimentoPedido;
begin

end;

function TDAOMovimentoPedido.QuantidadeRegistro: Integer;
begin

end;

function TDAOMovimentoPedido.This: iEntidadeMovimentoPedido<iDAOMovimentoPedido>;
begin
  Result := FMovimentoPedido;
end;

end.
