unit Model.DAO.Imp.Email.Pessoa;

interface

uses
  Data.DB,

  System.SysUtils,

  Uteis,
  Uteis.Tratar.Mensagens,
  Model.DAO.Email.Pessoa.Interfaces,
  Model.Entidade.Email.Pessoa.Interfaces,
  Model.Conexao.Firedac.Interfaces,
  Model.Conexao.Query.Interfaces,
  Model.Entidade.Imp.Email.Pessoa,
  Model.Conexao.Firedac.MySQL.Imp,
  Model.Conexao.Query.Imp;

type
  TDAOEmailPessoa = class(TInterfacedObject, iDAOEmailPessoa)
    private
      FEmailPessoa : iEntidadeEmailPessoa<iDAOEmailPessoa>;
      FConexao     : iConexao;
      FQuery       : iQuery;
      FUteis       : TUteis;
      FMSG         : TMensagens;
      FDataSet     : TDataSet;

      FKey     : String;
      FValue   : String;

      const
        FSQL=('select '+
              'emp.id, '+
              'emp.idempresa, '+
              'emp.idpessoa, '+
              'emp.email, '+
              'emp.tipo, '+
              'emp.ativo '+
              'from emailpessoa emp');

      procedure FiltroKey;
      function  FiltroValue(Value : String) : String;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iDAOEmailPessoa;

      function DataSet(DataSource : TDataSource) : iDAOEmailPessoa; overload;
      function DataSet                           : TDataSet;         overload;
      function GetAll                            : iDAOEmailPessoa;
      function GetbyId(Id : Variant)             : iDAOEmailPessoa;
      function GetbyParams                       : iDAOEmailPessoa;
      function Post                              : iDAOEmailPessoa;
      function Put                               : iDAOEmailPessoa;
      function Delete                            : iDAOEmailPessoa;

      function This : iEntidadeEmailPessoa<iDAOEmailPessoa>;
  end;

implementation

{ TDAOEmailPessoa }

constructor TDAOEmailPessoa.Create;
begin
  FEmailPessoa := TEntidadeEmailPessoa<iDAOEmailPessoa>.New(Self);
  FConexao     := TModelConexaoFiredacMySQL.New;
  FQuery       := TQuery.New;
  FUteis       := TUteis.Create;
  FMSG         := TMensagens.Create;
end;

destructor TDAOEmailPessoa.Destroy;
begin
  FreeAndNil(FUteis);
  FreeAndNil(FMSG);
  inherited;
end;

class function TDAOEmailPessoa.New: iDAOEmailPessoa;
begin
  Result := Self.Create;
end;

procedure TDAOEmailPessoa.FiltroKey;
begin
  if FEmailPessoa.IdEmpresa > 0  then FKey := 'idempresa';
  if FEmailPessoa.IdPessoa  > 0  then FKey := 'idpessoa';
  if FEmailPessoa.Email    <> '' then FKey := 'email';

  FValue := FiltroValue(FKey);
end;

function TDAOEmailPessoa.FiltroValue(Value: String): String;
begin
  Result := '';
  if Value ='idempresa' then
    Result := IntToStr(FEmailPessoa.IdEmpresa);
  if Value ='idpessoa' then
    Result := IntToStr(FEmailPessoa.IdPessoa);
  if Value ='email' then
    Result := FEmailPessoa.Email;
end;

function TDAOEmailPessoa.DataSet(DataSource: TDataSource): iDAOEmailPessoa;
begin
  Result := Self;
  if not Assigned(FDataset) then
    DataSource.DataSet := FQuery.DataSet
  else
    DataSource.DataSet := FDataSet;
end;

function TDAOEmailPessoa.DataSet: TDataSet;
begin
  Result := FDataSet;
end;

function TDAOEmailPessoa.GetAll: iDAOEmailPessoa;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL)
                    .Open
                  .DataSet;
    except
     raise Exception.Create(FMSG.MSGerroGet);
    end;
  finally
    if not FDataSet.IsEmpty then
      FEmailPessoa.Id(FDataSet.FieldByName('id').AsInteger) else FEmailPessoa.Id(0);
  end;
end;

function TDAOEmailPessoa.GetbyId(Id: Variant): iDAOEmailPessoa;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL)
                    .Add('where e.id=:id')
                    .Params('Id', Id)
                    .Open
                  .DataSet;
    except
      raise Exception.Create(FMSG.MSGerroGet);
    end;
  finally
    if not FDataSet.IsEmpty then
      FEmailPessoa.Id(FDataSet.FieldByName('id').AsInteger) else FEmailPessoa.Id(0);
  end;
end;

function TDAOEmailPessoa.GetbyParams: iDAOEmailPessoa;
begin

end;

function TDAOEmailPessoa.Post: iDAOEmailPessoa;
begin

end;

function TDAOEmailPessoa.Put: iDAOEmailPessoa;
begin

end;

function TDAOEmailPessoa.Delete: iDAOEmailPessoa;
const
  LSQL=('delete from emailpessoa where id=:id ');
begin
  Result := self;
  FConexao.StartTransaction;
  try
    try
      FQuery.SQL(LSQL)
               .Params('id', FEmailPessoa.Id)
            .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroDelete);
    end;
  finally
    FConexao.Commit;
    //Criar MSG
  end;
end;

function TDAOEmailPessoa.This: iEntidadeEmailPessoa<iDAOEmailPessoa>;
begin
  Result := FEmailPessoa;
end;

end.
