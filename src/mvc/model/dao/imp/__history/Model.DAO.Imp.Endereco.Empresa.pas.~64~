{*******************************************************}
{                    API PDV - JSON                     }
{                      ES Sistemas                      }
{          Início do projeto 03/04/2024 16:03           }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2024                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit Model.DAO.Imp.Endereco.Empresa;

interface

uses
  Data.DB,

  System.SysUtils,

  Uteis,
  Uteis.Tratar.Mensagens,

  Model.DAO.Endereco.Empresa.Interfaces,
  Model.Entidade.Endereco.Empresa.Interfaces,
  Model.Conexao.Firedac.Interfaces,
  Model.Conexao.Query.Interfaces,
  Model.Entidade.Imp.Endereco.Empresa,
  Model.Conexao.Firedac.MySQL.Imp,
  Model.Conexao.Query.Imp;

type
  TDAOEnderecoEmpresa = class(TInterfacedObject, iDAOEnderecoEmpresa)
    private
      FEnderecoEmpresa : iEntidadeEnderecoEmpresa<iDAOEnderecoEmpresa>;
      FConexao         : iConexao;
      FQuery           : iQuery;
      FUteis           : TUteis;
      FMSG             : TMensagens;
      FDataSet         : TDataSet;

      FKey     : String;
      FValue   : String;

      const
      FSQL=('select '+
            'ee.id, '+
            'ee.idendereco, '+
            'ee.idempresa, '+
            'ed.cep, '+
            'ed.tipologradouro, '+
            'ed.logradouro, '+
            'n.numeroendereco, '+
            'n.complementoendereco, '+
            'ed.Bairro, '+
            'ed.ibge, '+
            'm.municipio, '+
            'm.uf '+
            'from enderecoempresa ee '+
            'inner join endereco ed on ed.id        = ee.idendereco '+
            'inner join municipio m on m.ibge       = ed.ibge '+
            'left  join numero    n on n.idendereco = ee.idendereco '
           );

      procedure FiltroKey;
      function  FiltroValue(Value : String) : String;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iDAOEnderecoEmpresa;

      function DataSet(DataSource : TDataSource) : iDAOEnderecoEmpresa; overload;
      function DataSet                           : TDataSet;            overload;
      function GetAll                            : iDAOEnderecoEmpresa;
      function GetbyId(Id : Variant)             : iDAOEnderecoEmpresa;
      function GetbyParams                       : iDAOEnderecoEmpresa;
      function Post                              : iDAOEnderecoEmpresa;
      function Put                               : iDAOEnderecoEmpresa;
      function Delete                            : iDAOEnderecoEmpresa;

      function This : iEntidadeEnderecoEmpresa<iDAOEnderecoEmpresa>;
  end;

implementation

{ TDAOEnderecoEmpresa }

constructor TDAOEnderecoEmpresa.Create;
begin
  FEnderecoEmpresa := TEntidadeEnderecoEmpresa<iDAOEnderecoEmpresa>.New(Self);
  FConexao         := TModelConexaoFiredacMySQL.New;
  FQuery           := TQuery.New;
  FUteis           := TUteis.Create;
  FMSG             := TMensagens.Create;
end;

destructor TDAOEnderecoEmpresa.Destroy;
begin
  FreeAndNil(FUteis);
  FreeAndNil(FMSG);
  inherited;
end;

class function TDAOEnderecoEmpresa.New: iDAOEnderecoEmpresa;
begin
  Result := Self.Create;
end;

procedure TDAOEnderecoEmpresa.FiltroKey;
begin
  if FEnderecoEmpresa.IdEndereco    >0 then FKey := 'ee.idendereco';
  if FEnderecoEmpresa.IdEmpresa     >0 then FKey := 'ee.idempresa';
  if FEnderecoEmpresa.Endereco.IBGE >0 then FKey := 'ed.ibge';
  if FEnderecoEmpresa.Endereco.Cep<>'' then FKey := 'ed.cep';

  FValue := FiltroValue(FKey);
end;

function TDAOEnderecoEmpresa.FiltroValue(Value: String): String;
begin
  Result := '';
  if Value ='ee.idendereco' then
    Result := IntToStr(FEnderecoEmpresa.IdEndereco);
  if Value ='ee.ideempresa' then
    Result := IntToStr(FEnderecoEmpresa.IdEndereco);
  if Value ='ed.ibge'       then
    Result := IntToStr(FEnderecoEmpresa.Endereco.IBGE);
  if Value ='ed.cep'        then
    Result := FEnderecoEmpresa.Endereco.Cep;
end;

function TDAOEnderecoEmpresa.DataSet(DataSource: TDataSource): iDAOEnderecoEmpresa;
begin
  Result := Self;
  if not Assigned(FDataset) then
    DataSource.DataSet := FQuery.DataSet
  else
    DataSource.DataSet := FDataSet;
end;

function TDAOEnderecoEmpresa.DataSet: TDataSet;
begin
  Result := FDataSet;
end;

function TDAOEnderecoEmpresa.GetAll: iDAOEnderecoEmpresa;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL)
                    .Open
                  .DataSet;
    except
     raise Exception.Create(FMSG.MSGerroGet);
    end;
  finally
    if not FDataSet.IsEmpty then
      FEnderecoEmpresa.Id(FDataSet.FieldByName('id').AsInteger) else FEnderecoEmpresa.Id(0);
  end;
end;

function TDAOEnderecoEmpresa.GetbyId(Id: Variant): iDAOEnderecoEmpresa;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL)
                      .Add('where ee.id=:id')
                      .Params('id', Id)
                    .Open
                  .DataSet;
    except
      raise Exception.Create(FMSG.MSGerroGet);
    end;
  finally
    if not FDataSet.IsEmpty then
      FEnderecoEmpresa.Id(FDataSet.FieldByName('id').AsInteger) else FEnderecoEmpresa.Id(0);
  end;
end;

function TDAOEnderecoEmpresa.GetbyParams: iDAOEnderecoEmpresa;
begin
  Result := Self;
  FiltroKey;
  try
   try
     FDataSet := FQuery
                   .SQL(FSQL)
                     .Add('where ee.idempresa =:idempresa')
                     .Add('and   ee.idendereco=ee.idendereco')
                     .Params('idempresa'  , FEnderecoEmpresa.IdEmpresa)
                     .Add('order by ee.idempresa asc')
                     .Add(', ee.idendereco asc')
                   .Open
                 .DataSet;
   except
     raise exception.Create(FMSG.MSGerroGet);
   end;
  finally
   if not FDataSet.IsEmpty then
      FEnderecoEmpresa.Id(FDataSet.FieldByName('id').AsInteger) else FEnderecoEmpresa.Id(0);
  end;
end;

function TDAOEnderecoEmpresa.Post: iDAOEnderecoEmpresa;
const
  LSQL=('insert into enderecoempresa( '+
                                    'idendereco, '+
                                    'idempresa ' +
                                    ')'+
                                    ' values '+
                                    '('+
                                    ':idendereco, '+
                                    ':idempresa ' +
                                    ') '
       );
begin
  Result := Self;
  FConexao.StartTransaction;
  try
    try
      FQuery
        .SQL(LSQL)
          .Params('idendereco' , FEnderecoEmpresa.IdEndereco)
          .Params('idempresa'  , FEnderecoEmpresa.IdEmpresa)
          .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroPost);
    end;
  finally
    FConexao.Commit;
    FDataSet := FQuery
                    .SQL('select LAST_INSERT_ID () as id ')
                    .Open
                    .DataSet;
    FEnderecoEmpresa.Id(FDataSet.FieldByName('id').AsInteger);
  end;
end;

function TDAOEnderecoEmpresa.Put: iDAOEnderecoEmpresa;
const
  LSQL=('update enderecoempresa set '+
                               'idendereco=:idendereco, '+
                               'idempresa =:idempresa '+
                               'where id=:id '
       );
begin
  Result := Self;

  FConexao.StartTransaction;
  try
    try
      FQuery
        .SQL(LSQL)
          .Params('id'         , FEnderecoEmpresa.Id)
          .Params('idendereco' , FEnderecoEmpresa.IdEndereco)
          .Params('idempresa'  , FEnderecoEmpresa.IdEmpresa)
        .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroPut);
    end;
  finally
    FConexao.Commit;
    //Criar MSG
  end;
end;

function TDAOEnderecoEmpresa.Delete: iDAOEnderecoEmpresa;
const
  LSQL=('delete from enderecoempresa where id=:id ');
begin
  Result := self;
  FConexao.StartTransaction;
  try
    try
      FQuery.SQL(LSQL)
               .Params('id', FEnderecoEmpresa.Id)
            .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroDelete);
    end;
  finally
    FConexao.Commit;
    //Criar MSG
  end;
end;

function TDAOEnderecoEmpresa.This: iEntidadeEnderecoEmpresa<iDAOEnderecoEmpresa>;
begin
  Result := FEnderecoEmpresa;
end;

end.
