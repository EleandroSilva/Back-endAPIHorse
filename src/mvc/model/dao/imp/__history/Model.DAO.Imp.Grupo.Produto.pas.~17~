unit Model.DAO.Imp.Grupo.Produto;

interface

uses
  System.SysUtils,

  Data.DB,

  Uteis,
  Uteis.Tratar.Mensagens,

  Model.DAO.Grupo.Produto.Interfaces,
  Model.Entidade.Grupo.Produto.Interfaces,
  Model.Conexao.Firedac.Interfaces,
  Model.Conexao.Query.Interfaces,
  Model.Conexao.Firedac.MySQL.Imp,
  Model.Conexao.Query.Imp;

type
  TDAOGrupoProduto = class(TInterfacedObject, iDAOGrupoProduto)
    private
      FGrupoProduto : iEntidadeGrupoProduto<iDAOGrupoProduto>;
      FConexao      : iConexao;
      FUteis        : TUteis;
      FMSG          : TMensagens;

      FDataSet      : TDataSet;
      FQuery        : iQuery;
   const
      FSQL=('select '+
            'gp.id, '+
            'gp.idempresa, '+
            'gp.nome, '+
            'gp.ativo '+
            'from grupoproduto gp');
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iDAOGrupoProduto;

      function DataSet(DataSource : TDataSource) : iDAOGrupoProduto; overload;
      function DataSet                           : TDataSet;         overload;
      function GetAll                            : iDAOGrupoProduto;
      function GetbyId(Id : Variant)             : iDAOGrupoProduto;
      function GetbyParams                       : iDAOGrupoProduto;
      function Post                              : iDAOGrupoProduto;
      function Put                               : iDAOGrupoProduto;
      function Delete                            : iDAOGrupoProduto;

      function This : iEntidadeGrupoProduto<iDAOGrupoProduto>;
  end;

implementation

{ TDAOGrupoProduto }

constructor TDAOGrupoProduto.Create;
begin
  FGrupoProduto := TEntidadeGrupoProduto<iDAOGrupoProduto>.New(Self);
  FConexao      := TModelConexaoFiredacMySQL.New;
  FQuery        := TQuery.New;

  FUteis        := TUteis.Create;
  FMSG          := TMensagens.Create;
end;

destructor TDAOGrupoProduto.Destroy;
begin
  FreeAndNil(FUteis);
  FreeAndNil(FMSG);
  inherited;
end;

class function TDAOGrupoProduto.New: iDAOGrupoProduto;
begin
  Result := Self.Create;
end;

function TDAOGrupoProduto.DataSet(DataSource: TDataSource): iDAOGrupoProduto;
begin
  Result := Self;
  if not Assigned(FDataset) then
    DataSource.DataSet := FQuery.DataSet
  else
    DataSource.DataSet := FDataSet;
end;

function TDAOGrupoProduto.DataSet: TDataSet;
begin
  Result := FDataSet;
end;

function TDAOGrupoProduto.GetAll: iDAOGrupoProduto;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL)
                    .Open
                  .DataSet;
    except
     raise Exception.Create(FMSG.MSGerroGet);
    end;
  finally
    if not FDataSet.IsEmpty then
      FGrupoProduto.Id(FDataSet.FieldByName('id').AsInteger) else FGrupoProduto.Id(0);
  end;
end;

function TDAOGrupoProduto.GetbyId(Id: Variant): iDAOGrupoProduto;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL)
                    .Add('where e.id=:id')
                    .Params('Id', Id)
                    .Open
                  .DataSet;
    except
      raise Exception.Create(FMSG.MSGerroGet);
    end;
  finally
    if not FDataSet.IsEmpty then
      FGrupoProduto.Id(FDataSet.FieldByName('id').AsInteger) else FGrupoProduto.Id(0);
  end;
end;

function TDAOGrupoProduto.GetbyParams: iDAOGrupoProduto;
begin
  Result := Self;
  try
   try
     FDataSet := FQuery
                   .SQL(FSQL+' where ' + FUteis.Pesquisar('nome', ';' + FGrupoProduto.Nome))
                   .Open
                 .DataSet;
   except
     raise exception.Create(FMSG.MSGerroGet);
   end;
  finally
   if not FDataSet.IsEmpty then
      FGrupoProduto.Id(FDataSet.FieldByName('id').AsInteger) else FGrupoProduto.Id(0);
  end;
end;

function TDAOGrupoProduto.Post: iDAOGrupoProduto;
const
  LSQL=('insert into grupoproduto('+
                             'idempresa, '+
                             'nome, '+
                             'ativo '+
                           ')'+
                             ' values '+
                           '('+
                             ':idempresa, '+
                             ':nome, '+
                             ':ativo ' +
                            ')'
       );
begin
  Result := Self;

  FConexao.StartTransaction;
  try
    try
      FQuery
        .SQL(LSQL)
          .Params('idempresa ', FGrupoProduto.IdEmpresa)
          .Params('nome'      , FGrupoProduto.Nome)
          .Params('ativo'     , FGrupoProduto.Ativo)
        .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroPost);
    end;
  finally
    FConexao.Commit;
    FDataSet := FQuery
                    .SQL('select LAST_INSERT_ID () as id')
                    .Open
                    .DataSet;
    FGrupoProduto.Id(FDataSet.FieldByName('id').AsInteger);
  end;
end;

function TDAOGrupoProduto.Put: iDAOGrupoProduto;
const
  LSQL=('update grupoproduto set '+
        'idempresa=:idempresa, '+
        'nome=:nome, '+
        'ativo=:ativo '+
        'where id=:id '
       );
begin
  Result := Self;

  FConexao.StartTransaction;
  try
    try
      FQuery
        .SQL(LSQL)
          .Params('id'        , FGrupoProduto.Id)
          .Params('idempresa' , FGrupoProduto.IdEmpresa)
          .Params('nome'      , FGrupoProduto.Nome)
          .Params('ativo'     , FGrupoProduto.Ativo)
        .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroPut);
    end;
  finally
    FConexao.Commit;
  end;
end;

function TDAOGrupoProduto.Delete: iDAOGrupoProduto;
const
  LSQL=('delete from grupoproduto where id=:id ');
begin
  Result := self;
  FConexao.StartTransaction;
  try
    try
      FQuery.SQL(LSQL)
               .Params('id', FGrupoProduto.Id)
            .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroDelete');
    end;
  finally
    FConexao.Commit;
  end;
end;

function TDAOGrupoProduto.This: iEntidadeGrupoProduto<iDAOGrupoProduto>;
begin
  Result := FGrupoProduto;
end;

end.
