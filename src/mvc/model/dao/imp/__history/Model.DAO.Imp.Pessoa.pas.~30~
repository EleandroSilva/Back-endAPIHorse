{*******************************************************}
{                    API PDV - JSON                     }
{                      ES Sistemas                      }
{          Início do projeto 03/04/2024 16:03           }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2024                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit Model.DAO.Imp.Pessoa;

interface

uses
  System.SysUtils,
  Data.DB,


  Uteis,
  Uteis.Tratar.Mensagens,

  Model.DAO.Pessoa.Interfaces,
  Model.Entidade.Pessoa.Interfaces,
  Model.Conexao.Firedac.Interfaces,
  Model.Conexao.Query.Interfaces,
  Model.Entidade.Imp.Pessoa,
  Model.Conexao.Firedac.MySQL.Imp,
  Model.Conexao.Query.Imp;

type
  TDAOPessoa = class(TInterfacedObject, iDAOPessoa)
    private
      FPessoa  : iEntidadePessoa<iDAOPessoa>;
      FConexao : iConexao;
      FQuery   : iQuery;
      FUteis   : TUteis;
      FMSG     : TMensagens;
      FDataSet : TDataSet;

      FKey     : String;
      FValue   : String;
   const
      FSQL= ('select '+
             'p.id, '+
             'p.idempresa, '+
             'p.CPFCNPJ, '+
             'p.RGIE, '+
             'p.nomepessoa, '+
             'p.sobrenome, '+
             'case when p.FisicaJuridica =''F'' then ''Física'' else ''Jurídica'' '+
             'end FisicaJuridica, '+
             'p.FisicaJuridica as FJ, '+
             'case when p.sexo = ''M'' then ''Masculino'' else ''Feminimo'' '+
             'end Sexo, '+
             'p.sexo as MF, '+
             'case '+
             'when p.tipopessoa =''A'' then ''Ambos'' '+
             'when p.tipopessoa =''C'' then ''Cliente'' '+
             'when p.tipopessoa =''F'' then ''Fornecedor'' '+
             'end estapessoae,  '+
             'p.tipopessoa, '+
             'p.ativo '+
             'from pessoa p '
             );
      procedure FiltroKey;
      function  FiltroValue(Value : String) : String;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iDAOPessoa;

      function DataSet(DataSource : TDataSource) : iDAOPessoa; overload;
      function DataSet                           : TDataSet;   overload;
      function GetAll                            : iDAOPessoa;
      function GetbyId(Id : Variant)             : iDAOPessoa;
      function GetbyParams                       : iDAOPessoa;
      function Post                              : iDAOPessoa;
      function Put                               : iDAOPessoa;
      function Delete                            : iDAOPessoa;

      function This : iEntidadePessoa<iDAOPessoa>;
  end;

implementation

{ TDAOPessoa }

constructor TDAOPessoa.Create;
begin
  FPessoa  := TEntidadePessoa<iDAOPessoa>.New(Self);
  FConexao := TModelConexaoFiredacMySQL.New;
  FQuery   := TQuery.New;
  FUteis   := TUteis.Create;
  FMSG     := TMensagens.Create;
end;

destructor TDAOPessoa.Destroy;
begin
  FreeAndNil(FUteis);
  FreeAndNil(FMSG);
  inherited;
end;

class function TDAOPessoa.New: iDAOPessoa;
begin
  Result := Self.Create;
end;

procedure TDAOPessoa.FiltroKey;
begin
  if FPessoa.CPFCNPJ        <> '' then FKey := 'p.cpfcnpj';
  if FPessoa.NomePessoa     <> '' then FKey := 'p.nomepessoa';
  if FPessoa.SobreNome      <> '' then FKey := 'p.sobrenome';
  if FPessoa.FisicaJuridica <> '' then FKey := 'p.fisicajuridica';
  if FPessoa.Sexo           <> '' then FKey := 'p.sexo';

  FValue := FiltroValue(FKey);
end;

function TDAOPessoa.FiltroValue(Value: String): String;
begin
  Result := '';
  if Value ='p.cpfcnpj'        then Result := FPessoa.CPFCNPJ;
  if Value ='p.nomepessoa'     then Result := FPessoa.NomePessoa;
  if Value ='p.sobrenome'      then Result := FPessoa.SobreNome;
  if Value ='p.fisicajuridica' then Result := FPessoa.FisicaJuridica;
  if Value ='p.sexo'           then Result := FPessoa.Sexo;
end;

function TDAOPessoa.DataSet(DataSource: TDataSource): iDAOPessoa;
begin
  Result := Self;
  if not Assigned(FDataset) then
    DataSource.DataSet := FQuery.DataSet
  else
    DataSource.DataSet := FDataSet;
end;

function TDAOPessoa.DataSet: TDataSet;
begin
  Result := FDataSet;
end;

function TDAOPessoa.GetAll: iDAOPessoa;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL)
                    .Open
                  .DataSet;
    except
     raise Exception.Create(FMSG.MSGerroGet);
    end;
  finally
    if not FDataSet.IsEmpty then
      FPessoa.Id(FDataSet.FieldByName('id').AsInteger) else FPessoa.Id(0);
  end;
end;

function TDAOPessoa.GetbyId(Id: Variant): iDAOPessoa;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL)
                    .Add('where e.id=:id')
                    .Params('Id', Id)
                    .Open
                  .DataSet;
    except
      raise Exception.Create(FMSG.MSGerroGet);
    end;
  finally
    if not FDataSet.IsEmpty then
      FPessoa.Id(FDataSet.FieldByName('id').AsInteger) else FPessoa.Id(0);
  end;
end;

function TDAOPessoa.GetbyParams: iDAOPessoa;
begin
  Result := Self;
  FiltroKey;
  try
   try
     FDataSet := FQuery
                   .SQL(FSQL+' where ' + FUteis.Pesquisar(FKey, ';' + FValue))
                   .Open
                 .DataSet;
   except
     raise exception.Create(FMSG.MSGerroGet);
   end;
  finally
   if not FDataSet.IsEmpty then
      FPessoa.Id(FDataSet.FieldByName('id').AsInteger) else FPessoa.Id(0);
  end;
end;

function TDAOPessoa.Post: iDAOPessoa;
const
  LSQL=('insert into pessoa( '+
                           'idempresa, '+
                           'cpfcnpj, '+
                           'rgie, ' +
                           'nomepessoa, '+
                           'sobrenome, ' +
                           'fisicajuridica, '+
                           'sexo, '+
                           'tipopessoa, ' +
                           'ativo '+
                           ')'+
                           ' values '+
                           '( '+
                           ':idempresa, '+
                           ':cpfcnpj, '+
                           ':rgie, ' +
                           ':nomepessoa, '+
                           ':sobrenome, ' +
                           ':fisicajuridica, '+
                           ':sexo, '+
                           ':tipopessoa, ' +
                           ':ativo '+
                           ')'
       );
begin
  Result := Self;
  FConexao.StartTransaction;
  try
    try
      FQuery
        .SQL(LSQL)
          .Params('idempresa'      , FPessoa.IdEmpresa)
          .Params('cpfcnpj'        , FPessoa.CPFCNPJ)
          .Params('rgie'           , FPessoa.RGIE)
          .Params('nome'           , FPessoa.Nome)
          .Params('sobrenome'      , FPessoa.SobreNome)
          .Params('fisicajuridica' , FPessoa.FisicaJuridica)
          .Params('sexo'           , FPessoa.Sexo)
          .Params('tipopessoa'     , FPessoa.TipoPessoa)
          .Params('ativo'          , FPessoa.Ativo)
          .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroPost);
    end;
  finally
    FConexao.Commit;
    FDataSet := FQuery
                    .SQL('select LAST_INSERT_ID () as id')
                    .Open
                    .DataSet;
    FPessoa.Id(FDataSet.FieldByName('id').AsInteger);
  end;
end;

function TDAOPessoa.Put: iDAOPessoa;
const
  LSQL=('update pessoa set '+
                        'idempresa     =:idempresa, '+
                        'cpfcnpj       =:cpfcnpj, '+
                        'rgie          =:rgie, '+
                        'nome          =:nome, '+
                        'sobrenome     =:nomefantasia, '+
                        'fisicajuridica=:fisicajuridica, '+
                        'sexo          =:sexo, '+
                        'tipopessoa    =:tipopessoa, '+
                        'ativo         =:ativo '+
                        'where id=:id '
       );
begin
Result := Self;

  FConexao.StartTransaction;
  try
    try
      FQuery
        .SQL(LSQL)
          .Params('id'             , FPessoa.Id)
          .Params('idempresa'      , FPessoa.IdEmpresa)
          .Params('cpfcnpj'        , FPessoa.CPFCNPJ)
          .Params('rgie'           , FPessoa.RGIE)
          .Params('nome'           , FPessoa.Nome)
          .Params('sobrenome'      , FPessoa.SobreNome)
          .Params('fisicajuridica' , FPessoa.FisicaJuridica)
          .Params('sexo'           , FPessoa.Sexo)
          .Params('tipopessoa'     , FPessoa.TipoPessoa)
          .Params('ativo'          , FPessoa.Ativo)
        .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroPut);
    end;
  finally
    FConexao.Commit;
    //Criar MSG
  end;
end;

function TDAOPessoa.Delete: iDAOPessoa;
const
  LSQL=('delete from pessoa where id=:id ');
begin
  Result := self;
  FConexao.StartTransaction;
  try
    try
      FQuery.SQL(LSQL)
               .Params('id', FPessoa.Id)
            .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroDelete);
    end;
  finally
    FConexao.Commit;
    //Criar MSG
  end;
end;

function TDAOPessoa.This: iEntidadePessoa<iDAOPessoa>;
begin
  Result := FPessoa;
end;

end.
