unit Model.DAO.Imp.Unidade.Produto;

interface

uses
  System.SysUtils,
  Data.DB,
  Uteis.Tratar.Mensagens,
  Uteis,

  Model.DAO.Unidade.Produto.Interfaces,
  Model.Entidade.Unidade.Produto.Interfaces,
  Model.Conexao.Firedac.Interfaces,
  Model.Conexao.Query.Interfaces,
  Model.Entidade.Imp.Unidade.Produto,
  Model.Conexao.Firedac.MySQL.Imp,
  Model.Conexao.Query.Imp;

type
  TDAOUnidadeProduto = class(TInterfacedObject, iDAOUnidadeProduto)
    private
      FUnidadeProduto : iEntidadeUnidadeProduto<iDAOUnidadeProduto>;
      FConexao        : iConexao;
      FDataSet        : TDataSet;
      FQuery          : iQuery;
      FMSG            : TMensagens;
      FUteis          : TUteis;

      FKey     : String;
      FValue   : String;

      FQuantidadeRegistroJSON : Integer;//Pego a quantidade de registro que veio no select
   const
      FSQL=('select '+
            'up.id, '+
            'up.unidade, '+
            'up.nomeunidade, '+
            'up.ativo '+
            'from unidadeproduto up');

      procedure FiltroKey;
      function  FiltroValue(Value : String) : String;
      function LoopQuantidadeRegistroJSON : Integer;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iDAOUnidadeProduto;

      function DataSet(DataSource : TDataSource) : iDAOUnidadeProduto; overload;
      function DataSet                           : TDataSet;    overload;
      function GetAll                            : iDAOUnidadeProduto;
      function GetbyId(Id : Variant)             : iDAOUnidadeProduto;
      function GetbyParams                       : iDAOUnidadeProduto;
      function Post                              : iDAOUnidadeProduto;
      function Put                               : iDAOUnidadeProduto;
      function Delete                            : iDAOUnidadeProduto;
      function QuantidadeRegistroJSON            : Integer;

      function This : iEntidadeUnidadeProduto<iDAOUnidadeProduto>;
  end;

implementation

{ TDAOUnidadeProduto }

constructor TDAOUnidadeProduto.Create;
begin
  FUnidadeProduto := TEntidadeUnidadeProduto<iDAOUnidadeProduto>.New(Self);
  FConexao        := TModelConexaoFiredacMySQL.New;
  FQuery          := TQuery.New;
  FUteis          := TUteis.Create;
end;

destructor TDAOUnidadeProduto.Destroy;
begin
  FreeAndNil(FUteis);
  inherited;
end;

class function TDAOUnidadeProduto.New: iDAOUnidadeProduto;
begin
  Result := Self.Create;
end;

procedure TDAOUnidadeProduto.FiltroKey;
begin
  if FUnidadeProduto.NomeUnidade<>'' then FKey := 'up.nomeunidade';

  FValue := FiltroValue(FKey);
end;

function TDAOUnidadeProduto.FiltroValue(Value : String) : String;
begin
  Result := '';
  if Value ='up.nomeunidade' then
    Result := FUnidadeProduto.NomeUnidade;
end;

function TDAOUnidadeProduto.DataSet(DataSource: TDataSource): iDAOUnidadeProduto;
begin
  Result := Self;
  if not Assigned(FDataset) then
    DataSource.DataSet := FQuery.DataSet
  else
    DataSource.DataSet := FDataSet;
end;

function TDAOUnidadeProduto.DataSet: TDataSet;
begin
  Result := FDataSet;
end;

function TDAOUnidadeProduto.GetAll: iDAOUnidadeProduto;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL)
                    .Open
                  .DataSet;
    except
     raise Exception.Create(FMSG.MSGerroGet);
    end;
  finally
    if not FDataSet.IsEmpty then
      if LoopQuantidadeRegistroJSON = 1 then
        FUnidadeProduto.Id(FDataSet.FieldByName('id').AsInteger) else FUnidadeProduto.Id(0);
  end;
end;

function TDAOUnidadeProduto.GetbyId(Id: Variant): iDAOUnidadeProduto;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL+' where up.Id=:Id')
                    .Params('Id', Id)
                    .Open
                  .DataSet;
    except
      raise Exception.Create(FMSG.MSGerroGet);
    end;
  finally
    if not FDataSet.IsEmpty then
      FUnidadeProduto.Id(FDataSet.FieldByName('id').AsInteger) else FUnidadeProduto.Id(0);
  end;
end;

function TDAOUnidadeProduto.GetbyParams: iDAOUnidadeProduto;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL+' where ' + FUteis.Pesquisar('nome', ';' + FUnidadeProduto.Nome))
                    .Open
                  .DataSet;
    except
      raise Exception.Create(FMSG.MSGerroGet);
    end;
  finally
   if not FDataSet.IsEmpty then
     if LoopQuantidadeRegistroJSON = 1 then
       FUnidadeProduto.Id(FDataSet.FieldByName('id').AsInteger) else FUnidadeProduto.Id(0);
  end;
end;

function TDAOUnidadeProduto.Post: iDAOUnidadeProduto;
const
  LSQL=('insert into unidadeproduto( '+
                             'unidade, '+
                             'nomeunidade, '+
                             'ativo '+
                           ')'+
                             ' values '+
                           '('+
                             ':unidade, '+
                             ':nomeunidade, '+
                             ':ativo '+
                            ')'
       );
begin
  Result := Self;

  FConexao.StartTransaction;
  try
    try
      FQuery
        .SQL(LSQL)
          .Params('unidade'     , FUnidadeProduto.Unidade)
          .Params('nomeunidade' , FUnidadeProduto.NomeUnidade)
          .Params('ativo'       , FUnidadeProduto.Ativo)
        .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroPost);
    end;
  finally
    FConexao.Commit;
    FDataSet := FQuery
                    .SQL('select LAST_INSERT_ID () as id')
                    .Open
                    .DataSet;
    FUnidadeProduto.Id(FDataSet.FieldByName('id').AsInteger);
  end;
end;

function TDAOUnidadeProduto.Put: iDAOUnidadeProduto;
const
  LSQL=('update unidadeproduto set '+
                              'unidade    =:unidade, '+
                              'nomeunidade=:nomeunidade, '+
                              'ativo      =:ativo '+
                              'where id   =:id ');
begin
  Result := Self;

  FConexao.StartTransaction;
  try
    try
      FQuery
        .SQL(LSQL)
          .Params('id'          , FUnidadeProduto.Id)
          .Params('unidade'     , FUnidadeProduto.Unidade)
          .Params('nomeunidade' , FUnidadeProduto.NomeUnidade)
          .Params('ativo'       , FUnidadeProduto.Ativo)
        .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroPut);
    end;
  finally
    FConexao.Commit;
  end;
end;

function TDAOUnidadeProduto.Delete: iDAOUnidadeProduto;
const
  LSQL=('delete from unidadeproduto where id=:id ');
begin
  Result := self;
  FConexao.StartTransaction;
 try
  try
    FQuery.SQL(LSQL)
            .Params('id', FUnidadeProduto.Id)
          .ExecSQL;
  except
    FConexao.Rollback;
    raise Exception.Create(FMSG.MSGerroDelete);
  end;
 finally
   FConexao.Commit;
 end;
end;

//Loop para contar a quantidade de registo que veio dentro da Query
function TDAOUnidadeProduto.LoopQuantidadeRegistroJSON: Integer;
begin
  Result := 0;
  try
    FDataSet.First;
    while not FDataSet.Eof do
    begin
      Result := Result + 1;
      FDataSet.Next;
    end;
  finally
    FQuantidadeRegistroJSON := Result;
  end;
end;

//Pego a quantidade de registro que veio do LoopQuantidadeRegistroJSON
function TDAOUnidadeProduto.QuantidadeRegistroJSON: Integer;
begin
  Result := FQuantidadeRegistroJSON;
end;

function TDAOUnidadeProduto.This: iEntidadeUnidadeProduto<iDAOUnidadeProduto>;
begin
  Result := FUnidadeProduto;
end;

end.
