{*******************************************************}
{                    API PDV - JSON                     }
{                      ES Sistemas                      }
{          Início do projeto 03/04/2024 16:03           }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2024                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit Model.DAO.Imp.Numero;

interface

uses
  System.SysUtils,
  Data.DB,

  Uteis,
  Uteis.Tratar.Mensagens,

  Model.DAO.Numero.Interfaces,
  Model.Conexao.Firedac.Interfaces,
  Model.Conexao.Query.Interfaces,
  Model.Entidade.Numero.Interfaces,
  Model.Entidade.Imp.Numero,
  Model.Conexao.Firedac.MySQL.Imp,
  Model.Conexao.Query.Imp;

type
  TDAONumero = class(TInterfacedObject, iDAONumero)
    private
      FNumero  : iEntidadeNumero<iDAONumero>;
      FConexao : iConexao;
      FQuery   : iQuery;
      FUteis   : TUteis;
      FMSG     : TMensagens;
      FDataSet : TDataSet;

      FKey     : String;
      FValue   : String;

      const
        FSQL= ('select '+
               'n.id, '+
               'n.idendereco, '+
               'n.numero, '+
               'n.complemento '+
               'from numero n '
               );

      procedure FiltroKey;
      function  FiltroValue(Value : String) : String;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iDAONumero;

      function DataSet(DataSource : TDataSource) : iDAONumero; overload;
      function DataSet                           : TDataSet;   overload;
      function GetAll                            : iDAONumero;
      function GetbyId(Id : Variant)             : iDAONumero;
      function GetbyParams                       : iDAONumero;
      function Post                              : iDAONumero;
      function Put                               : iDAONumero;
      function Delete                            : iDAONumero;

      function This : iEntidadeNumero<iDAONumero>;
  end;

implementation

{ TDAONumero }

constructor TDAONumero.Create;
begin
  FNumero  := TEntidadeNumero<iDAONumero>.New(Self);
  FConexao := TModelConexaoFiredacMySQL.New;
  FQuery   := TQuery.New;
  FUteis   := TUteis.Create;
  FMSG     := TMensagens.Create;
end;

destructor TDAONumero.Destroy;
begin
  FreeAndNil(FUteis);
  FreeAndNil(FMSG);
  inherited;
end;

procedure TDAONumero.FiltroKey;
begin
  if FNumero.IdEndereco >  0 then FKey := 'n.idendereco';
  if FNumero.Numero    <> '' then FKey := 'n.numero';

  FValue := FiltroValue(FKey);
end;

function TDAONumero.FiltroValue(Value: String): String;
begin
  Result := '';
  if Value ='n.idendereco' then
    Result := IntToStr(FNumero.IdEndereco);
  if Value ='n.numero' then
    Result := FNumero.Numero;
end;

class function TDAONumero.New: iDAONumero;
begin
  Result := Self.Create;
end;

function TDAONumero.DataSet(DataSource: TDataSource): iDAONumero;
begin
  Result := Self;
  if not Assigned(FDataset) then
    DataSource.DataSet := FQuery.DataSet
  else
    DataSource.DataSet := FDataSet;
end;

function TDAONumero.DataSet: TDataSet;
begin
  Result := FDataSet;
end;

function TDAONumero.GetAll: iDAONumero;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL)
                    .Open
                  .DataSet;
    except
     raise Exception.Create(FMSG.MSGerroGet);
    end;
  finally
    if not FDataSet.IsEmpty then
      FNumero.Id(FDataSet.FieldByName('id').AsInteger) else FNumero.Id(0);
  end;
end;

function TDAONumero.GetbyId(Id: Variant): iDAONumero;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL)
                    .Add('where e.id=:id')
                    .Params('Id', Id)
                    .Open
                  .DataSet;
    except
      raise Exception.Create(FMSG.MSGerroGet);
    end;
  finally
    if not FDataSet.IsEmpty then
      FNumero.Id(FDataSet.FieldByName('id').AsInteger) else FNumero.Id(0);
  end;
end;

function TDAONumero.GetbyParams: iDAONumero;
begin
  Result := Self;
  FiltroKey;
  try
   try
     FDataSet := FQuery
                   .SQL(FSQL)
                   .Add('where ' + FUteis.Pesquisar(FKey, ';' + FValue))
                   .Open
                 .DataSet;
   except
     raise exception.Create(FMSG.MSGerroGet);
   end;
  finally
   if not FDataSet.IsEmpty then
      FNumero.Id(FDataSet.FieldByName('id').AsInteger) else FNumero.Id(0);
  end;
end;

function TDAONumero.Post: iDAONumero;
const
  LSQL=('insert into numero(idendereco, '+
                            'numero, '+
                            'complemento '+
                           ')'+
                           ' values '+
                           '('+
                            ':idendereco, '+
                            ':numero, '+
                            ':complemento '+
                             ') '
       );
begin
  Result := Self;

  FConexao.StartTransaction;
  try
    try
      FQuery
        .SQL(LSQL)
          .Params('idendereco' , FNumero.IdEndereco)
          .Params('numero'      , FNumero.Numero)
          .Params('complemento' , FNumero.Complemento)
        .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroPost);
    end;
  finally
    FConexao.Commit;
    FDataSet := FQuery
                    .SQL('select LAST_INSERT_ID () as id ')
                    .Open
                    .DataSet;
    FNumero.Id(FDataSet.FieldByName('id').AsInteger);
  end;
end;

function TDAONumero.Put: iDAONumero;
const
  LSQL=('update numero set '+
        'idendereco  =:idendereco, '+
        'numero      =:numero, '+
        'complemento =:complemento '+
        'where id    =:id '
       );
begin
  Result := Self;

  FConexao.StartTransaction;
  try
    try
      FQuery
        .SQL(LSQL)
          .Params('id'          , FNumero.Id)
          .Params('idempresa'   , FNumero.IdEndereco)
          .Params('numero'      , FNumero.Numero)
          .Params('complemento' , FNumero.Complemento)
        .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroPut);
    end;
  finally
    FConexao.Commit;
    //Criar MSG
  end;
end;

function TDAONumero.Delete: iDAONumero;
const
  LSQL=('delete from complmento where id=:id ');
begin
  Result := self;
  FConexao.StartTransaction;
  try
    try
      FQuery.SQL(LSQL)
               .Params('id', FNumero.Id)
            .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroDelete);
    end;
  finally
    FConexao.Commit;
    //Criar MSG
  end;
end;

function TDAONumero.This: iEntidadeNumero<iDAONumero>;
begin
  Result := FNumero;
end;

end.
