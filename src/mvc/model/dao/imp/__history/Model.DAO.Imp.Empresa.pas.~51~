{*******************************************************}
{                    API PDV - JSON                     }
{                      ES Sistemas                      }
{          Início do projeto 18/03/2024 13:39           }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2024                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit Model.DAO.Imp.Empresa;

interface

uses
  System.SysUtils,
  Data.DB,

  Uteis,
  Uteis.Tratar.Mensagens,

  Model.DAO.Empresa.Interfaces,
  Model.Entidade.Empresa.Interfaces,
  Model.Conexao.Firedac.Interfaces,
  Model.Conexao.Query.Interfaces,
  Model.Entidade.Imp.Empresa,
  Model.Conexao.Firedac.MySQL.Imp,
  Model.Conexao.Query.Imp;

type
  TDAOEmpresa = class(TInterfacedObject, iDAOEmpresa)
    private
      FEmpresa : iEntidadeEmpresa<iDAOEmpresa>;
      FConexao : iConexao;
      FQuery   : iQuery;
      FUteis   : TUteis;
      FMSG     : TMensagens;
      FDataSet : TDataSet;

      FKey     : String;
      FValue   : String;
   const
      FSQL=('select '+
            'e.Id, '+
            'e.cnpj, '+
            'e.inscricaoestadual,  '+
            'e.nomeempresarial, '+
            'e.nomefantasia, '+
            'e.idnaturezajuridica, '+
            'nj.nomenaturezajuridica, '+
            'e.dataemissao, '+
            'e.datasituacaocadastral, '+
            'e.ativo '
            );

     FCount=(', '+
             '(select '+
             'count(*) '+
             'from empresa e1 '+
             ') as quantidaderegistro '
              );

      FFRom=('from empresa e '+
            'left join naturezajuridica nj on nj.id=e.idnaturezajuridica '
             );
      procedure FiltroKey;
      function  FiltroValue(Value : String) : String;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iDAOEmpresa;

      function DataSet(DataSource : TDataSource) : iDAOEmpresa; overload;
      function DataSet                           : TDataSet;    overload;
      function GetAll                            : iDAOEmpresa;
      function GetbyId(Id : Variant)             : iDAOEmpresa;
      function GetbyParams                       : iDAOEmpresa;
      function Post                              : iDAOEmpresa;
      function Put                               : iDAOEmpresa;
      function Delete                            : iDAOEmpresa;

      function This : iEntidadeEmpresa<iDAOEmpresa>;
  end;

implementation

{ TDAOEmpresa }

constructor TDAOEmpresa.Create;
begin
  FEmpresa := TEntidadeEmpresa<iDAOEmpresa>.New(Self);
  FConexao := TModelConexaoFiredacMySQL.New;
  FQuery   := TQuery.New;
  FUteis   := TUteis.Create;
  FMSG     := TMensagens.Create;
end;

destructor TDAOEmpresa.Destroy;
begin
  FreeAndNil(FUteis);
  FreeAndNil(FMSG);
  inherited;
end;

class function TDAOEmpresa.New: iDAOEmpresa;
begin
  Result := Self.Create;
end;

procedure TDAOEmpresa.FiltroKey;
begin
  if FEmpresa.CNPJ<>''            then FKey := 'e.cnpj';
  if FEmpresa.NomeEmpresarial<>'' then FKey := 'e.nomeempresarial';

  FValue := FiltroValue(FKey);
end;

function TDAOEmpresa.FiltroValue(Value : String) : String;
begin
  Result := '';
  if Value ='e.cnpj' then
    Result := FEmpresa.CNPJ else Result := FEmpresa.NomeEmpresarial;
end;

function TDAOEmpresa.DataSet(DataSource: TDataSource): iDAOEmpresa;
begin
  Result := Self;
  if not Assigned(FDataset) then
    DataSource.DataSet := FQuery.DataSet
  else
    DataSource.DataSet := FDataSet;
end;

function TDAOEmpresa.DataSet: TDataSet;
begin
  Result := FDataSet;
end;

function TDAOEmpresa.GetAll: iDAOEmpresa;
var
  texto : string;
begin
  Result := Self;
  texto := FSQL+FCount+FFrom;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL+FCount+FFrom)
                    .Add('order by e.id asc')
                    .Open
                  .DataSet;
    except
     raise Exception.Create(FMSG.MSGerroGet);
    end;
  finally
    if not FDataSet.IsEmpty then
      FEmpresa.Id(FDataSet.FieldByName('id').AsInteger) else FEmpresa.Id(0);
  end;
end;

function TDAOEmpresa.GetbyId(Id: Variant): iDAOEmpresa;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL+FFrom)
                    .Add('where e.id=:id')
                    .Params('Id', Id)
                    .Open
                  .DataSet;
    except
      raise Exception.Create(FMSG.MSGerroGet);
    end;
  finally
    if not FDataSet.IsEmpty then
      FEmpresa.Id(FDataSet.FieldByName('id').AsInteger) else FEmpresa.Id(0);
  end;
end;

function TDAOEmpresa.GetbyParams: iDAOEmpresa;
begin
  Result := Self;
  FiltroKey;
  try
   try
     FDataSet := FQuery
                   .SQL(FSQL+FCount+FFrom+' where ' + FUteis.Pesquisar(FKey, ';' + FValue))
                   .Open
                 .DataSet;
   except
     raise exception.Create(FMSG.MSGerroGet);
   end;
  finally
   if not FDataSet.IsEmpty then
     FEmpresa.Id(FDataSet.FieldByName('id').AsInteger) else FEmpresa.Id(0);
  end;
end;

function TDAOEmpresa.Post: iDAOEmpresa;
const
  LSQL=('insert into empresa( '+
                             'cnpj, '+
                             'inscricaoestadual, ' +
                             'nomeempresarial, '+
                             'nomefantasia, ' +
                             'idnaturezajuridica, '+
                             'dataemissao, '+
                             'datasituacaocadastral, ' +
                             'ativo '+
                           ')'+
                             ' values '+
                           '('+
                             ':cnpj, '+
                             ':inscricaoestadual, ' +
                             ':nomeempresarial, '+
                             ':nomefantasia, ' +
                             ':idnaturezajuridica, '+
                             ':dataemissao, '+
                             ':datasituacaocadastral, ' +
                             ':ativo '+
                            ') '
       );
begin
  Result := Self;
  FConexao.StartTransaction;
  try
    try
      FQuery
        .SQL(LSQL)
          .Params('cnpj'                 , FEmpresa.CNPJ)
          .Params('inscricaoestadual'    , Fempresa.InscricaoEstadual)
          .Params('nomeempresarial'      , FEmpresa.NomeEmpresarial)
          .Params('nomefantasia'         , FEmpresa.NomeFantasia)
          .Params('idnaturezajuridica'   , FEmpresa.IdNaturezaJuridica)
          .Params('dataemissao'          , FEmpresa.DataEmissao)
          .Params('datasituacaocadastral', FEmpresa.DataSituacaoCadastral)
          .Params('ativo'                , FEmpresa.Ativo)
          .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroPost);
    end;
  finally
    FConexao.Commit;
    FDataSet := FQuery
                    .SQL('select LAST_INSERT_ID () as id ')
                    .Open
                    .DataSet;
    FEmpresa.Id(FDataSet.FieldByName('id').AsInteger);
  end;
end;

function TDAOEmpresa.Put: iDAOEmpresa;
const
  LSQL=('update empresa set '+
                        'cnpj                 =:cnpj, '+
                        'inscricaoestadual    =:inscricaoestadual, '+
                        'nomeempresarial      =:nomeempresarial, '+
                        'nomefantasia         =:nomefantasia, '+
                        'idnaturezajuridica   =:idnaturezajuridica, '+
                        'dataemissao          =:dataemissao, '+
                        'datasituacaocadastral=:datasituacaocadastral, '+
                        'ativo                =:ativo '+
                        'where id=:id '
       );
begin
  Result := Self;

  FConexao.StartTransaction;
  try
    try
      FQuery
        .SQL(LSQL)
          .Params('id'                    , FEmpresa.Id)
          .Params('cnpj'                  , FEmpresa.CNPJ)
          .Params('inscricaoestadual'     , FEmpresa.InscricaoEstadual)
          .Params('nomeempresarial'       , FEmpresa.NomeEmpresarial)
          .Params('nomefantasia'          , FEmpresa.NomeFantasia)
          .Params('idnaturezajuridica'    , FEmpresa.IdNaturezaJuridica)
          .Params('dataemissao'           , FEmpresa.DataEmissao)
          .Params('datasituacaocadastral' , FEmpresa.DataSituacaoCadastral)
          .Params('ativo'                 , FEmpresa.Ativo)
        .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroPut);
    end;
  finally
    FConexao.Commit;
  end;
end;

function TDAOEmpresa.Delete: iDAOEmpresa;
const
  LSQL=('delete from empresa where id=:id ');
begin
  Result := self;
  FConexao.StartTransaction;
  try
    try
      FQuery.SQL(LSQL)
               .Params('id', FEmpresa.Id)
            .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroDelete);
    end;
  finally
    FConexao.Commit;
  end;
end;

function TDAOEmpresa.This: iEntidadeEmpresa<iDAOEmpresa>;
begin
  Result := FEmpresa;
end;

end.
