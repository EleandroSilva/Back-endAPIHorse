{*******************************************************}
{                    API PDV - JSON                     }
{                      ES Sistemas                      }
{          Início do projeto 03/04/2024 16:03           }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2024                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit Model.DAO.Imp.Email.Pessoa;

interface

uses
  Data.DB,

  System.SysUtils,

  Uteis,
  Uteis.Tratar.Mensagens,
  Model.DAO.Email.Pessoa.Interfaces,
  Model.Entidade.Email.Pessoa.Interfaces,
  Model.Conexao.Firedac.Interfaces,
  Model.Conexao.Query.Interfaces,
  Model.Entidade.Imp.Email.Pessoa,
  Model.Conexao.Firedac.MySQL.Imp,
  Model.Conexao.Query.Imp;

type
  TDAOEmailPessoa = class(TInterfacedObject, iDAOEmailPessoa)
    private
      FEmailPessoa : iEntidadeEmailPessoa<iDAOEmailPessoa>;
      FConexao     : iConexao;
      FQuery       : iQuery;
      FUteis       : TUteis;
      FMSG         : TMensagens;
      FDataSet     : TDataSet;

      FKey     : String;
      FValue   : String;

      const
        FSQL=('select '+
              'emp.id, '+
              'emp.idempresa, '+
              'emp.idpessoa, '+
              'emp.email, '+
              'emp.tipoemail, '+
              'emp.ativo '
              );
        FCount=(',' +
               '(' +
               'select '+
               '  count(*) ' +
               'from emailpessoa p1 '+
               'where p1.idpessoa=p.idpessoa '+
               ') as quantidaderegistro '
              );
        FFrom=('from emailpessoa emp');

      procedure FiltroKey;
      function  FiltroValue(Value : String) : String;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iDAOEmailPessoa;

      function DataSet(DataSource : TDataSource) : iDAOEmailPessoa; overload;
      function DataSet                           : TDataSet;        overload;
      function GetAll                            : iDAOEmailPessoa;
      function GetbyId(Id : Variant)             : iDAOEmailPessoa;
      function GetbyParams                       : iDAOEmailPessoa;
      function Post                              : iDAOEmailPessoa;
      function Put                               : iDAOEmailPessoa;
      function Delete                            : iDAOEmailPessoa;

      function This : iEntidadeEmailPessoa<iDAOEmailPessoa>;
  end;

implementation

{ TDAOEmailPessoa }

constructor TDAOEmailPessoa.Create;
begin
  FEmailPessoa := TEntidadeEmailPessoa<iDAOEmailPessoa>.New(Self);
  FConexao     := TModelConexaoFiredacMySQL.New;
  FQuery       := TQuery.New;
  FUteis       := TUteis.Create;
  FMSG         := TMensagens.Create;
end;

destructor TDAOEmailPessoa.Destroy;
begin
  FreeAndNil(FUteis);
  FreeAndNil(FMSG);
  inherited;
end;

class function TDAOEmailPessoa.New: iDAOEmailPessoa;
begin
  Result := Self.Create;
end;

procedure TDAOEmailPessoa.FiltroKey;
begin
  if FEmailPessoa.IdPessoa  > 0  then FKey := 'idpessoa';
  if FEmailPessoa.IdEmpresa > 0  then FKey := 'idempresa';
  if FEmailPessoa.Email    <> '' then FKey := 'email';

  FValue := FiltroValue(FKey);
end;

function TDAOEmailPessoa.FiltroValue(Value: String): String;
begin
  Result := '';
  if Value ='idpessoa' then
    Result := IntToStr(FEmailPessoa.IdPessoa);
  if Value ='idempresa' then
    Result := IntToStr(FEmailPessoa.IdEmpresa);
  if Value ='email' then
    Result := FEmailPessoa.Email;
end;

function TDAOEmailPessoa.DataSet(DataSource: TDataSource): iDAOEmailPessoa;
begin
  Result := Self;
  if not Assigned(FDataset) then
    DataSource.DataSet := FQuery.DataSet
  else
    DataSource.DataSet := FDataSet;
end;

function TDAOEmailPessoa.DataSet: TDataSet;
begin
  Result := FDataSet;
end;

function TDAOEmailPessoa.GetAll: iDAOEmailPessoa;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL+FCount+FFrom)
                    .Open
                  .DataSet;
    except
     raise Exception.Create(FMSG.MSGerroGet);
    end;
  finally
    if not FDataSet.IsEmpty then
      FEmailPessoa.Id(FDataSet.FieldByName('id').AsInteger) else FEmailPessoa.Id(0);
  end;
end;

function TDAOEmailPessoa.GetbyId(Id: Variant): iDAOEmailPessoa;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL+FFrom)
                    .Add('where e.idpessoa=:idpessoa')
                    .Params('Id', Id)
                    .Open
                  .DataSet;
    except
      raise Exception.Create(FMSG.MSGerroGet);
    end;
  finally
    if not FDataSet.IsEmpty then
      FEmailPessoa.Id(FDataSet.FieldByName('id').AsInteger) else FEmailPessoa.Id(0);
  end;
end;

function TDAOEmailPessoa.GetbyParams: iDAOEmailPessoa;
var
  texto : string;
begin
  Result := Self;
  FiltroKey;
  Texto := FSQL+FCount+FFrom;
  try
   try
     FDataSet := FQuery
                   .SQL(FSQL+FCount+FFrom+' where ' + FUteis.Pesquisar(FKey, ';' + FValue))
                   .Open
                 .DataSet;
   except
     raise exception.Create(FMSG.MSGerroGet);
   end;
  finally
   if not FDataSet.IsEmpty then
     FEmailPessoa.Id(FDataSet.FieldByName('id').AsInteger) else FEmailPessoa.Id(0);
  end;
end;

function TDAOEmailPessoa.Post: iDAOEmailPessoa;
const
  LSQL=('insert into emailpessoa('+
                                 'idempresa,' +
                                 'idpessoa, '+
                                 'email, '+
                                 'tipoemail, '+
                                 'ativo '+
                                 ')'+
                                 ' values '+
                                 '('+
                                 ':idempresa,' +
                                 ':idpessoa, '+
                                 ':email, '+
                                 ':tipoemail, '+
                                 ':ativo '+
                                 ')'
       );
begin
  Result := Self;
  FConexao.StartTransaction;
  try
    try
      FQuery
        .SQL(LSQL)
          .Params('idempresa' , FEmailPessoa.IdEmpresa)
          .Params('idpessoa'  , FEmailPessoa.IdPessoa)
          .Params('email'     , FEmailPessoa.Email)
          .Params('tipoemail' , FEmailPessoa.TipoEmail)
          .Params('ativo'     , FEmailPessoa.Ativo)
          .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroPost);
    end;
  finally
    FConexao.Commit;
    FDataSet := FQuery
                    .SQL('select LAST_INSERT_ID () as id')
                    .Open
                    .DataSet;
    FEmailPessoa.Id(FDataSet.FieldByName('id').AsInteger);
  end;
end;

function TDAOEmailPessoa.Put: iDAOEmailPessoa;
const
  LSQL=('update emailpessoa set '+
                               'idempresa =:idempresa, '+
                               'idpessoa  =:idpessoa, '+
                               'email     =:email, '+
                               'tipoemail =:tipoemail '+
                               'ativo     =:ativo '+
                               'where   id=:id '
       );
begin
  Result := Self;

  FConexao.StartTransaction;
  try
    try
      FQuery
        .SQL(LSQL)
          .Params('id'        , FEmailPessoa.Id)
          .Params('idempresa' , FEmailPessoa.IdEmpresa)
          .Params('idpessoa'  , FEmailPessoa.IdPessoa)
          .Params('email'     , FEmailPessoa.Email)
          .Params('tipoemail' , FEmailPessoa.TipoEmail)
          .Params('ativo'     , FEmailPessoa.Ativo)
        .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroPut);
    end;
  finally
    FConexao.Commit;
    //Criar MSG
  end;
end;

function TDAOEmailPessoa.Delete: iDAOEmailPessoa;
const
  LSQL=('delete from emailpessoa where id=:id ');
begin
  Result := self;
  FConexao.StartTransaction;
  try
    try
      FQuery.SQL(LSQL)
               .Params('id', FEmailPessoa.Id)
            .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroDelete);
    end;
  finally
    FConexao.Commit;
    //Criar MSG
  end;
end;

function TDAOEmailPessoa.This: iEntidadeEmailPessoa<iDAOEmailPessoa>;
begin
  Result := FEmailPessoa;
end;

end.
