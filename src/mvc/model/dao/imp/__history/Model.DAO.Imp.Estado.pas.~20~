{*******************************************************}
{                    API PDV - JSON                     }
{                      ES Sistemas                      }
{          Início do projeto 08/04/2024 22:46           }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2024                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit Model.DAO.Imp.Estado;

interface

uses
  System.SysUtils,
  Data.DB,

  FireDAC.Comp.Client,

  Uteis,
  Uteis.Tratar.Mensagens,

  Model.DAO.Estado.Interfaces,
  Model.Entidade.Estado.Interfaces,
  Model.Conexao.Firedac.Interfaces,
  Model.Conexao.Query.Interfaces,
  Model.Entidade.Imp.Estado,
  Model.Conexao.Firedac.MySQL.Imp,
  Model.Conexao.Query.Imp;

type
  TDAOEstado = class(TInterfacedObject, iDAOEstado)
    private
      FEstado : iEntidadeEstado<iDAOEstado>;
      FConexao   : iConexao;
      FQuery     : iQuery;
      FUteis     : TUteis;
      FMSG       : TMensagens;

      FDataSet   : TDataSet;

      FKey     : String;
      FValue   : String;
   const
      FSQL=('select '+
            'e.id, '+
            'e.idestado, '+
            'e.idregiao, '+
            'e.estado, '+
            'e.uf '
            );
      FCount=(','+
              '('+
              'select '+
              '  count(*) ' +
              'from estado e1 +' +
              'where e1.idregiao=e.idregiao '+
              ') as quantidaderegiao, ' +
              '('+
              'select '+
              '  count(*) '+
              'from estado e2 '+
              ') as quantidaderegistro '
              );
      FFrom=('from estado e ');

      procedure FiltroKey;
      function  FiltroValue(Value : String) : String;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iDAOEstado;

      function DataSet(DataSource : TDataSource) : iDAOEstado; overload;
      function DataSet                           : TDataSet;   overload;
      function GetAll                            : iDAOEstado;
      function GetbyId(Id : Variant)             : iDAOEstado;
      function GetbyParams                       : iDAOEstado;
      function Post                              : iDAOEstado;
      function Put                               : iDAOEstado;
      function Delete                            : iDAOEstado;

      function This : iEntidadeEstado<iDAOEstado>;
  end;

implementation

constructor TDAOEstado.Create;
begin
  FEstado  := TEntidadeEstado<iDAOEstado>.New(Self);
  FConexao := TModelConexaoFiredacMySQL.New;
  FQuery   := TQuery.New;
  FUteis   := TUteis.Create;
  FMSG     := TMensagens.Create;
end;

destructor TDAOEstado.Destroy;
begin
  FreeAndNil(FUteis);
  FreeAndNil(FMSG);
  inherited;
end;

class function TDAOEstado.New: iDAOEstado;
begin
  Result := Self.Create;
end;

procedure TDAOEstado.FiltroKey;
begin
  if FEstado.IdEstado  > 0 then FKey := 'idestado';
  if FEstado.IdRegiao  > 0 then FKey := 'idregiao';
  if FEstado.UF       <>'' then FKey := 'uf';
  FValue := FiltroValue(FKey);
end;

function TDAOEstado.FiltroValue(Value : String) : String;
begin
  Result := '';
  if Value ='idestado' then
    Result := IntToStr(FEstado.IdEstado);
  if Value ='idregiao' then
    Result := IntToStr(FEstado.IdRegiao);
  if Value = 'uf' then
    Result := FEstado.UF;
end;

function TDAOEstado.DataSet(DataSource: TDataSource): iDAOEstado;
begin
  Result := Self;
  if not Assigned(FDataset) then
    DataSource.DataSet := FQuery.DataSet
  else
    DataSource.DataSet := FDataSet;
end;

function TDAOEstado.DataSet: TDataSet;
begin
  Result := FDataSet;
end;

function TDAOEstado.GetAll: iDAOEstado;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL+FCount+FFrom)
                    .Open
                  .DataSet;
    except
     raise Exception.Create(FMSG.MSGerroGet);
    end;
  finally
    if not FDataSet.IsEmpty then
      FEstado.Id(FDataSet.FieldByName('id').AsInteger) else FEstado.Id(0);
  end;
end;

function TDAOEstado.GetbyId(Id: Variant): iDAOEstado;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL+FFrom)
                    .Add('where Id=:Id')
                    .Params('Id', Id)
                    .Open
                  .DataSet;
    except
      raise Exception.Create(FMSG.MSGerroGet);
    end;
  finally
    if not FDataSet.IsEmpty then
      FEstado.Id(FDataSet.FieldByName('id').AsInteger) else FEstado.Id(0);
  end;
end;

function TDAOEstado.GetbyParams: iDAOEstado;
begin
  Result := Self;
  try
   try
     FDataSet := FQuery
                   .SQL(FSQL+FCount+FFrom+' where ' + FUteis.Pesquisar(FKey, ';' + FValue))
                   .Open
                 .DataSet;
   except
     raise exception.Create(FMSG.MSGerroGet);
   end;
  finally
   if not FDataSet.IsEmpty then
      FEstado.Id(FDataSet.FieldByName('id').AsInteger) else FEstado.Id(0);
  end;
end;

function TDAOEstado.Post: iDAOEstado;
const
  LSQL=('insert into estado('+
                             'idestado, '+
                             'idregiao, '+
                             'estado, '+
                             'uf '+
                           ')'+
                             ' values '+
                           '('+
                             ':idestado, '+
                             ':idregiao, '+
                             ':estado, '+
                             ':uf '+
                            ')'
       );
begin
  Result := Self;

  FConexao.StartTransaction;
  try
    try
      FQuery
        .SQL(LSQL)
          .Params('idestado' , FEstado.IdEstado)
          .Params('idregiao' , FEstado.IdRegiao)
          .Params('estado'   , FEstado.Estado)
          .Params('uf'       , FEstado.UF)
        .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroPost);
    end;
  finally
    FConexao.Commit;
    FDataSet := FQuery
                    .SQL('select LAST_INSERT_ID () as id')
                    .Open
                    .DataSet;
    FEstado.Id(FDataSet.FieldByName('id').AsInteger);
  end;
end;

function TDAOEstado.Put: iDAOEstado;
const
  LSQL=('update estado set '+
                        'idestado =:ibge, '+
                        'idregiao =:idestado, '+
                        'estado   =:estado, '+
                        'uf       =:uf '+
                        'where id=:id '
       );
begin
  Result := Self;

  FConexao.StartTransaction;
  try
    try
      FQuery
        .SQL(LSQL)
          .Params('id'       , FEstado.Id)
          .Params('idestado' , FEstado.IdEstado)
          .Params('idregiao' , FEstado.IdRegiao)
          .Params('estado'   , FEstado.Estado)
          .Params('uf'       , FEstado.UF)
        .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroPut);
    end;
  finally
    FConexao.Commit;
    //Criar MSG
  end;
end;

function TDAOEstado.Delete: iDAOEstado;
const
  LSQL=('delete from estado where id=:id ');
begin
  Result := self;
  FConexao.StartTransaction;
  try
    try
      FQuery.SQL(LSQL)
               .Params('id', FEstado.Id)
            .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroDelete);
    end;
  finally
    FConexao.Commit;
    //Criar MSG
  end;
end;

function TDAOEstado.This: iEntidadeEstado<iDAOEstado>;
begin
  Result := FEstado;
end;

end.
