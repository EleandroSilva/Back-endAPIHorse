{*******************************************************}
{                    API PDV - JSON                     }
{                      Be More Web                      }
{          Início do projeto 03/04/2024 16:03           }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2024                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit Model.DAO.Imp.Pessoa;

interface

uses
  System.SysUtils,
  Data.DB,

  Uteis,
  Uteis.Tratar.Mensagens,

  Model.DAO.Pessoa.Interfaces,
  Model.Entidade.Pessoa.Interfaces,
  Model.Conexao.Firedac.Interfaces,
  Model.Conexao.Query.Interfaces,
  Model.Entidade.Imp.Pessoa,
  Model.Conexao.Firedac.MySQL.Imp,
  Model.Conexao.Query.Imp;

type
  TKey = (nomepessoa, sobrenome);

type
  TDAOPessoa = class(TInterfacedObject, iDAOPessoa)
    private
      FPessoa  : iEntidadePessoa<iDAOPessoa>;
      FConexao : iConexao;
      FQuery   : iQuery;
      FUteis   : TUteis;
      FMSG     : TMensagens;
      FDataSet : TDataSet;
    procedure FiltroKey;
   const
        FSQL= ('select '+
               'p.id, '+
               'p.idempresa, '+
               'p.idusuario, '+
               'p.cpfcnpj, '+
               'p.rgie, '+
               'p.nomepessoa, '+
               'p.sobrenome, '+
               'case when p.FisicaJuridica =''F'' then ''Física'' else ''Jurídica'' '+
               'end FisicaJuridica, '+
               'p.FisicaJuridica as FJ, '+
               'case when p.sexo = ''M'' then ''Masculino'' else ''Feminimo'' '+
               'end sexo, '+
               'p.sexo as MF, '+
               'case '+
               'when p.tipopessoa =''A'' then ''Ambos'' '+
               'when p.tipopessoa =''C'' then ''Cliente'' '+
               'when p.tipopessoa =''F'' then ''Fornecedor'' '+
               'end pessoatipo,  '+
               'p.tipopessoa, '+
               'p.datahoraemissao, '+
               'p.datanascimento, '+
               'p.ativo '+
               'from pessoa p '
              );
      function LoopRegistro (Value : Integer): Integer;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iDAOPessoa;

      function DataSet(DataSource : TDataSource)          : iDAOPessoa; overload;
      function DataSet                                    : TDataSet;   overload;
      function GetAll                                     : iDAOPessoa;
      function GetbyId(Id : Variant)                      : iDAOPessoa;
      function GetbyParams                                : iDAOPessoa; overload;
      function GetbyParams(aCPFCNPJ : String)             : iDAOPessoa; overload;
      function GetbyParams(Key: TKey; Value : String) : iDAOPessoa; overload;
      function Post                                       : iDAOPessoa;
      function Put                                        : iDAOPessoa;
      function Delete                                     : iDAOPessoa;
      function QuantidadeRegistro                         : Integer;

      function This : iEntidadePessoa<iDAOPessoa>;
  end;

implementation

{ TDAOPessoa }

constructor TDAOPessoa.Create;
begin
  FPessoa  := TEntidadePessoa<iDAOPessoa>.New(Self);
  FConexao := TModelConexaoFiredacMySQL.New;
  FQuery   := TQuery.New;
  FUteis   := TUteis.Create;
  FMSG     := TMensagens.Create;
end;

destructor TDAOPessoa.Destroy;
begin
  FreeAndNil(FUteis);
  FreeAndNil(FMSG);
  inherited;
end;

class function TDAOPessoa.New: iDAOPessoa;
begin
  Result := Self.Create;
end;


function TDAOPessoa.DataSet(DataSource: TDataSource): iDAOPessoa;
begin
  Result := Self;
  if not Assigned(FDataset) then
    DataSource.DataSet := FQuery.DataSet
  else
    DataSource.DataSet := FDataSet;
end;

function TDAOPessoa.DataSet: TDataSet;
begin
  Result := FDataSet;
end;

function TDAOPessoa.GetAll: iDAOPessoa;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL)
                    .Add('order by p.id asc')
                    .Open
                  .DataSet;
    except
     raise Exception.Create(FMSG.MSGerroGet);
    end;
  finally
    if not FDataSet.IsEmpty then
      FPessoa.Id(FDataSet.FieldByName('id').AsInteger) else FPessoa.Id(0);
  end;
end;

function TDAOPessoa.GetbyId(Id: Variant): iDAOPessoa;
begin
  Result := Self;
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL)
                    .Add('where p.id=:id')
                    .Params('Id', Id)
                    .Open
                  .DataSet;
    except
      raise Exception.Create(FMSG.MSGerroGet);
    end;
  finally
  if not FDataSet.IsEmpty then
  begin
    FPessoa.Id(FDataSet.FieldByName('id').AsInteger);
    QuantidadeRegistro;
  end else FPessoa.Id(0);
  end;
end;

function TDAOPessoa.GetbyParams(Key: TKey; Value : String): iDAOPessoa;
begin
  Result := Self;
  try
   try
     FDataSet := FQuery
                   .SQL(FSQL+' where ' + FUteis.Pesquisar('p.'+Key, ';' + Value))
                   .Open
                 .DataSet;
   except
     on E: Exception do
     raise exception.Create(FMSG.MSGerroGet+E.Message);
   end;
  finally
    if not FDataSet.IsEmpty then
    begin
      FPessoa.Id(FDataSet.FieldByName('id').AsInteger);
      QuantidadeRegistro;
    end
    else
      FPessoa.Id(0);
  end;
end;

function TDAOPessoa.GetbyParams(aCPFCNPJ: String): iDAOPessoa;
begin
  Result := Self;
  FUteis.ValidaCnpjCeiCpf(aCPFCNPJ, True);
  try
    try
      FDataSet := FQuery
                    .SQL(FSQL)
                    .Add('where e.cpfcnpj=:cpfcnpj')
                    .Params('cpfcnpj', aCPFCNPJ)
                    .Open
                  .DataSet;
    except
      on E: Exception do
      begin
        WriteLn('Erro ao tentar filtrar tabela pessoa pelo cpfcnpj: ' + E.Message);
        raise Exception.Create(FMSG.MSGerroGet+E.Message);
      end;
    end;
  finally
    if not FDataSet.IsEmpty then
      FPessoa.Id(FDataSet.FieldByName('p.id').AsInteger)
      else
      FPessoa.Id(0);
  end;
end;

function TDAOPessoa.GetbyParams: iDAOPessoa;
begin
  Result := Self;
  FiltroKey;
  try
   try
     FDataSet := FQuery
                   .SQL(FSQL+' where ' + FUteis.Pesquisar('p.nomepessoa', ';' + FPessoa.NomePessoa))
                   .Open
                 .DataSet;
   except
     on E: Exception do
     raise exception.Create(FMSG.MSGerroGet+E.Message);
   end;
  finally
    if not FDataSet.IsEmpty then
    begin
      FPessoa.Id(FDataSet.FieldByName('id').AsInteger);
      QuantidadeRegistro;
    end
    else
      FPessoa.Id(0);
  end;
end;

function TDAOPessoa.Post: iDAOPessoa;
const
  LSQL=('insert into pessoa( '+
                           'idempresa, '+
                           'idusuario, '+
                           'cpfcnpj, '+
                           'rgie, ' +
                           'nomepessoa, '+
                           'sobrenome, ' +
                           'fisicajuridica, '+
                           'sexo, '+
                           'tipopessoa, ' +
                           'datahoraemissao, '+
                           'datanascimento, '+
                           'ativo '+
                           ')'+
                           ' values '+
                           '( '+
                           ':idempresa, '+
                           ':idusuario, '+
                           ':cpfcnpj, '+
                           ':rgie, ' +
                           ':nomepessoa, '+
                           ':sobrenome, ' +
                           ':fisicajuridica, '+
                           ':sexo, '+
                           ':tipopessoa, ' +
                           ':datahoraemissao, '+
                           ':ativo '+
                           ')'
       );
begin
  Result := Self;
  FConexao.StartTransaction;
  try
    try
      FQuery
        .SQL(LSQL)
          .Params('idempresa'       , FPessoa.IdEmpresa)
          .Params('idusuario'       , FPessoa.IdUsuario)
          .Params('cpfcnpj'         , FPessoa.CPFCNPJ)
          .Params('rgie'            , FPessoa.RGIE)
          .Params('nomepessoa'      , FPessoa.NomePessoa)
          .Params('sobrenome'       , FPessoa.SobreNome)
          .Params('fisicajuridica'  , FPessoa.FisicaJuridica)
          .Params('sexo'            , FPessoa.Sexo)
          .Params('tipopessoa'      , FPessoa.TipoPessoa)
          .Params('datahoraemissao' , FPessoa.DataHoraEmissao)
          .Params('datanascimento'  , FPessoa.DataNascimento)
          .Params('ativo'           , FPessoa.Ativo)
          .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroPost);
    end;
  finally
    FConexao.Commit;
    FDataSet := FQuery
                    .SQL('select LAST_INSERT_ID () as id')
                    .Open
                    .DataSet;
    FPessoa.Id(FDataSet.FieldByName('id').AsInteger);
  end;
end;

function TDAOPessoa.Put: iDAOPessoa;
const
  LSQL=('update pessoa set '+
                        'idempresa     =:idempresa, '+
                        'idusuario     =:idusuario, '+
                        'cpfcnpj       =:cpfcnpj, '+
                        'rgie          =:rgie, '+
                        'nomepessoa    =:nome, '+
                        'sobrenome     =:nomefantasia, '+
                        'fisicajuridica=:fisicajuridica, '+
                        'sexo          =:sexo, '+
                        'tipopessoa    =:tipopessoa, '+
                        'datahoraemissao=:datahoraemissao, '+
                        'datanascimento =:datanascimento, '+
                        'ativo         =:ativo '+
                        'where id=:id '
       );
begin
Result := Self;

  FConexao.StartTransaction;
  try
    try
      FQuery
        .SQL(LSQL)
          .Params('id'              , FPessoa.Id)
          .Params('idempresa'       , FPessoa.IdEmpresa)
          .Params('idusuario'       , FPessoa.IdUsuario)
          .Params('cpfcnpj'         , FPessoa.CPFCNPJ)
          .Params('rgie'            , FPessoa.RGIE)
          .Params('nomepessoa'      , FPessoa.NomePessoa)
          .Params('sobrenome'       , FPessoa.SobreNome)
          .Params('fisicajuridica'  , FPessoa.FisicaJuridica)
          .Params('sexo'            , FPessoa.Sexo)
          .Params('tipopessoa'      , FPessoa.TipoPessoa)
          .Params('datahoraemissao' , FPessoa.DataHoraEmissao)
          .Params('datanascimento'  , FPessoa.DataNascimento)
          .Params('ativo'           , FPessoa.Ativo)
        .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroPut);
    end;
  finally
    FConexao.Commit;
  end;
end;

function TDAOPessoa.Delete: iDAOPessoa;
const
  LSQL=('delete from pessoa where id=:id ');
begin
  Result := self;
  FConexao.StartTransaction;
  try
    try
      FQuery.SQL(LSQL)
               .Params('id', FPessoa.Id)
            .ExecSQL;
    except
      FConexao.Rollback;
      raise Exception.Create(FMSG.MSGerroDelete);
    end;
  finally
    FConexao.Commit;
  end;
end;

function TDAOPessoa.LoopRegistro(Value : Integer): Integer;
begin
  FDataSet.First;
  try
    while not FDataSet.Eof do
    begin
      Value := Value + 1;
      FDataSet.Next;
    end;
  finally
    Result := Value;
  end;
end;

function TDAOPessoa.QuantidadeRegistro : Integer;
begin
  Result := LoopRegistro(0);
end;

function TDAOPessoa.This: iEntidadePessoa<iDAOPessoa>;
begin
  Result := FPessoa;
end;

end.
