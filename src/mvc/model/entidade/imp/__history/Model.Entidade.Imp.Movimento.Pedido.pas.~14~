{*******************************************************}
{                    API PDV - JSON                     }
{                      Be More Web                      }
{          Início do projeto 26/04/2024 12:00           }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2024                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit Model.Entidade.Imp.Movimento.Pedido;

interface

uses
  Model.Entidade.Movimento.Pedido.Interfaces;

type
  TMovimentoPedido<T : iInterface> = class(TInterfacedObject, iMovimentoPedido<T>)
    private
      [weak]
      FParent      : T;
      FId          : Integer;
      FIdEmpresa   : Integer;
      FIdPedido    : Integer;
      FIdUsuario   : Integer;
      FDataEmissao : TDateTime;
      FStatus      : Integer;
    public
      constructor Create(Parent : T);
      destructor Destroy; override;
      class function New(Parent : T) : iMovimentoPedido<T>;

      function Id         (Value: Integer)   : iMovimentoPedido<T>; overload;
      function Id                            : Integer;             overload;
      function IdEmpresa  (Value: Integer)   : iMovimentoPedido<T>; overload;
      function IdEmpresa                     : Integer;             overload;
      function IdPedido   (Value: Integer)   : iMovimentoPedido<T>; overload;
      function IdPedido                      : Integer;             overload;
      function DataEmissao(Value: TDateTime) : iMovimentoPedido<T>; overload;
      function DataEmissao                   : TDateTime;           overload;
      function Status     (Value: Integer)   : iMovimentoPedido<T>; overload;
      function Status                        : Integer;             overload;

      function &End : T;
  end;

implementation

{ TMovimentoPedido<T> }

constructor TMovimentoPedido<T>.Create(Parent: T);
begin
  FParent := Parent;
end;

destructor TMovimentoPedido<T>.Destroy;
begin
  inherited;
end;

class function TMovimentoPedido<T>.New(Parent: T): iMovimentoPedido<T>;
begin
  Result := Self.Create(Parent);
end;

function TMovimentoPedido<T>.Id(Value: Integer): iMovimentoPedido<T>;
begin
  Result := Self;
  FId    := Value;
end;

function TMovimentoPedido<T>.Id: Integer;
begin
  Result := FId;
end;

function TMovimentoPedido<T>.IdEmpresa(Value: Integer): iMovimentoPedido<T>;
begin
  Result := Self;
  FIdEmpresa := Value;
end;

function TMovimentoPedido<T>.IdEmpresa: Integer;
begin
  Result := FIdEmpresa;
end;

function TMovimentoPedido<T>.IdPedido(Value: Integer): iMovimentoPedido<T>;
begin
  Result := Self;
  FIdPedido := Value;
end;

function TMovimentoPedido<T>.IdPedido: Integer;
begin
  Result := FIdPedido;
end;

function TMovimentoPedido<T>.DataEmissao(Value: TDateTime): iMovimentoPedido<T>;
begin
  Result := Self;
  FDataEmissao := Value;
end;

function TMovimentoPedido<T>.DataEmissao: TDateTime;
begin
  Result := FDataEmissao;
end;

function TMovimentoPedido<T>.Status(Value: Integer): iMovimentoPedido<T>;
begin
  Result := Self;
  FStatus := Value;
end;

function TMovimentoPedido<T>.Status: Integer;
begin
  Result := FStatus;
end;

function TMovimentoPedido<T>.&End: T;
begin
  Result := FParent;
end;

end.
