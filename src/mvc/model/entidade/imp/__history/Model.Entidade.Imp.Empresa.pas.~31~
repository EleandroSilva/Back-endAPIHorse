unit Model.Entidade.Imp.Empresa;

interface

uses
  Model.Entidade.Empresa.Interfaces;

type
  TEntidadeEmpresa<T : iInterface> = class(TInterfacedObject, iEntidadeEmpresa<T>)
    private
      [weak]
      FParent                : T;
      FId                    : Integer;
      FIdContato             : Integer;
      FIdLogradouro          : Integer;
      FCNPJ                  : String;
      FInscricaoEstadual     : String;
      FNomeEmpresarial       : String;
      FNomeFantasia          : String;
      FNaturezaJuridica      : String;
      FDataEmissao           : TDateTime;
      FDataSituacaoCadastral : TDateTime;
      FKeyStr                : String;
      FAtivo                 : Integer;

    public
      constructor Create(Parent : T);
      destructor Destroy; override;
      class function New(Parent : T) : iEntidadeEmpresa<T>;

      function Id(Value : Integer)                      : iEntidadeEmpresa<T>; overload;
      function Id                                       : Integer;             overload;
      function IdContato(Value : Integer)               : iEntidadeEmpresa<T>; overload;
      function IdContato                                : Integer;             overload;
      function IdLogradouro(Value : Integer)            : iEntidadeEmpresa<T>; overload;
      function IdLogradouro                             : Integer;             overload;
      function CNPJ(Value : String)                     : iEntidadeEmpresa<T>; overload;
      function CNPJ                                     : String;              overload;
      function InscricaoEstadual(Value : String)        : iEntidadeEmpresa<T>; overload;
      function InscricaoEstadual                        : String;              overload;
      function NomeEmpresarial(Value : String)          : iEntidadeEmpresa<T>; overload;
      function NomeEmpresarial                          : String;              overload;
      function NomeFantasia(Value : String)             : iEntidadeEmpresa<T>; overload;
      function NomeFantasia                             : String;              overload;
      function NaturezaJuridica(Value : String)         : iEntidadeEmpresa<T>; overload;
      function NaturezaJuridica                         : String;              overload;
      function DataEmissao(Value : TDateTime)           : iEntidadeEmpresa<T>; overload;
      function DataEmissao                              : TDateTime;           overload;
      function DataSituacaoCadastral(Value : TDateTime) : iEntidadeEmpresa<T>; overload;
      function DataSituacaoCadastral                    : TDateTime;           overload;
      function KeyStr(Value : String)                   : iEntidadeEmpresa<T>; overload;
      function KeyStr                                   : String;              overload;

      function Ativo(Value : Integer)                   : iEntidadeEmpresa<T>; overload;
      function Ativo                                    : Integer;             overload;
      function &End : T;
  end;

implementation

{ TEntidadeEmpresa<T> }

constructor TEntidadeEmpresa<T>.Create(Parent: T);
begin
  FParent := Parent;
end;

destructor TEntidadeEmpresa<T>.Destroy;
begin
  inherited;
end;

class function TEntidadeEmpresa<T>.New(Parent: T): iEntidadeEmpresa<T>;
begin
  Result := Self.Create(Parent);
end;

function TEntidadeEmpresa<T>.Id(Value: Integer): iEntidadeEmpresa<T>;
begin
  Result := Self;
  FId    := Value;
end;

function TEntidadeEmpresa<T>.Id: Integer;
begin
  Result := FId;
end;

function TEntidadeEmpresa<T>.IdContato(Value: Integer): iEntidadeEmpresa<T>;
begin
  Result := Self;
  FIdContato := Value;
end;

function TEntidadeEmpresa<T>.IdContato: Integer;
begin
  Result := FIdContato;
end;

function TEntidadeEmpresa<T>.IdLogradouro(Value: Integer): iEntidadeEmpresa<T>;
begin
  Result := Self;
  FIdLogradouro := Value;
end;

function TEntidadeEmpresa<T>.IdLogradouro: Integer;
begin
  Result := FIdLogradouro;
end;

function TEntidadeEmpresa<T>.CNPJ(Value: String): iEntidadeEmpresa<T>;
begin
  Result := Self;
  FCNPJ  := Value;
end;

function TEntidadeEmpresa<T>.CNPJ: String;
begin
  Result := FCNPJ;
end;

function TEntidadeEmpresa<T>.InscricaoEstadual(Value: String): iEntidadeEmpresa<T>;
begin
  Result := Self;
  FInscricaoEstadual := Value;
end;

function TEntidadeEmpresa<T>.InscricaoEstadual: String;
begin
  Result := FInscricaoEstadual;
end;

function TEntidadeEmpresa<T>.NomeEmpresarial(Value: String): iEntidadeEmpresa<T>;
begin
  Result := Self;
  FNomeEmpresarial := Value;
end;

function TEntidadeEmpresa<T>.NomeEmpresarial: String;
begin
  Result := FNomeEmpresarial;
end;

function TEntidadeEmpresa<T>.NomeFantasia(Value: String): iEntidadeEmpresa<T>;
begin
  Result := Self;
  FNomeFantasia := Value;
end;

function TEntidadeEmpresa<T>.NomeFantasia: String;
begin
  Result := FNomeFantasia;
end;

function TEntidadeEmpresa<T>.NaturezaJuridica(Value: String): iEntidadeEmpresa<T>;
begin
  Result := Self;
  FNaturezaJuridica := Value;
end;

function TEntidadeEmpresa<T>.NaturezaJuridica: String;
begin
  Result := FNaturezaJuridica;
end;

function TEntidadeEmpresa<T>.DataEmissao(Value: TDateTime): iEntidadeEmpresa<T>;
begin
  Result := Self;
  FDataEmissao := Value;
end;

function TEntidadeEmpresa<T>.DataEmissao: TDateTime;
begin
  Result := FDataEmissao;
end;

function TEntidadeEmpresa<T>.DataSituacaoCadastral(Value: TDateTime): iEntidadeEmpresa<T>;
begin
  Result := Self;
  FDataSituacaoCadastral := Value;
end;

function TEntidadeEmpresa<T>.DataSituacaoCadastral: TDateTime;
begin
  Result := FDataSituacaoCadastral;
end;

function TEntidadeEmpresa<T>.KeyStr(Value: String): iEntidadeEmpresa<T>;
begin
  Result := Self;
  FKeyStr := Value;
end;

function TEntidadeEmpresa<T>.KeyStr: String;
begin
  Result := FKeyStr;
end;

function TEntidadeEmpresa<T>.Ativo(Value: Integer): iEntidadeEmpresa<T>;
begin
  Result := Self;
  FAtivo := Value;
end;

function TEntidadeEmpresa<T>.Ativo: Integer;
begin
  Result := FAtivo;
end;

function TEntidadeEmpresa<T>.&End: T;
begin
  Result := FParent;
end;

end.
