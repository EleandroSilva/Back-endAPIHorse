{*******************************************************}
{                    API PDV - JSON                     }
{                      Be More Web                      }
{          Início do projeto 30/04/2024 20:04           }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2024                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit Model.Imp.Pesquisa.Empresa;

interface

uses
  Data.DB,
  System.SysUtils,

  Model.Pesquisa.Empresa.Interfaces,
  Model.Entidade.Empresa.Interfaces,
  Controller.Interfaces;

type
  TPesquisaEmpresa = class(TInterfacedObject, iPesquisaEmpresa)
    private
      FController : iController;
      FEmpresa    : iEntidadeEmpresa<iPesquisaEmpresa>;

      FDSEmpresa  : TDataSource;

      //
      FFound : Boolean;
      FError : Boolean;
    public
      constructor Create;
      Destructor Destroy; override;
      class function New : iPesquisaEmpresa;

      function GetbyId             (Id : Variant)             : iPesquisaEmpresa;
      function GetbyCNPJ           (CNPJ: String)             : iPesquisaEmpresa;
      function GetbyNomeEmpresarial(NomeEmpresarial : String) : iPesquisaEmpresa;

      //
      function Found   : Boolean;
      function Error   : Boolean;
      function Empresa : iEntidadeEmpresa<iPesquisaEmpresa>;
      function &End    : iPesquisaEmpresa;
  end;

implementation

uses
  Imp.Controller,
  Model.Entidade.Imp.Empresa,
  Model.Cadastrar.Empresa.Interfaces;

{ TPesquisaEmpresa }

constructor TPesquisaEmpresa.Create;
begin
  FController := TController.New;
  FEmpresa    := TEntidadeEmpresa<iPesquisaEmpresa>.New(Self);
  FDSEmpresa  := TDataSource.Create(nil);

  //Variáveis
  FFound := False;
  FError := False;
end;

destructor TPesquisaEmpresa.Destroy;
begin
  inherited;
end;

class function TPesquisaEmpresa.New: iPesquisaEmpresa;
begin
  Result := Self.Create;
end;

function TPesquisaEmpresa.GetbyId(Id: Variant): iPesquisaEmpresa;
begin
  Result := Self;
  try
    FController
      .FactoryDAO
        .DAOEmpresa
          .GetbyId(Id)
        .DataSet(FDSEmpresa);
  except
    on E: Exception do
    begin
      WriteLn('Erro ao tentar filtrar tabela empresa pelo ID:' + E.Message);
      FError := True;
    end;
  end;
  FFound := Not FDSEmpresa.DataSet.IsEmpty;
end;

function TPesquisaEmpresa.GetbyCNPJ(CNPJ: String): iPesquisaEmpresa;
begin
  Result := Self;
  try
    FController
      .FactoryDAO
        .DAOEmpresa
          .GetbyCNPJ(CNPJ)
        .DataSet(FDSEmpresa);
  except
    on E: Exception do
    begin
      WriteLn('Erro ao tentar filtrar tabela empresa pelo CNPJ: ' + E.Message);
      FError := True;
    end;
  end;
  FFound := Not FDSEmpresa.DataSet.IsEmpty;
end;

function TPesquisaEmpresa.GetbyNomeEmpresarial(NomeEmpresarial: String): iPesquisaEmpresa;
begin

end;

//quando True-Sim Encontrado-Encontrada
function TPesquisaEmpresa.Found: Boolean;
begin
  Result := FFound;
end;

//quando True sim com erro
function TPesquisaEmpresa.Error: Boolean;
begin
  Result := FError;
end;

//Injeção de dependência
function TPesquisaEmpresa.Empresa: iEntidadeEmpresa<iPesquisaEmpresa>;
begin
  Result := FEmpresa;
end;

function TPesquisaEmpresa.&End: iPesquisaEmpresa;
begin
  Result := Self;
end;



end.
