unit Model.Imp.Cadastrar.Email.Empresa;

interface

uses
  Data.DB,
  System.JSON,
  System.SysUtils,

  DataSet.Serialize,
  Controller.Interfaces,
  Model.Cadastrar.Email.Empresa.Interfaces,
  Model.Entidade.Email.Empresa.Interfaces;

type
  TCadastrarEmailEmpresa = class(TInterfacedObject, iCadastrarEmailEmpresa)
    private
      FController : iController;
      FEmailEmpresa    : iEntidadeEmailEmpresa<iCadastrarEmailEmpresa>;
      FJSONArrayEmail  : TJSONArray;
      FJSONObjectEmail : TJSONObject;
      FJSONObjectPai   : TJSONObject;

      FDSEmailEmpresa  : TDataSource;
      FEncontrei : Boolean;
      FError     : Boolean;
      FQuantidadeRegistro : Integer;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iCadastrarEmailEmpresa;

      function JSONObjectPai(Value : TJSONObject) : iCadastrarEmailEmpresa; overload;
      function JSONObjectPai                      : TJSONObject;            overload;
      function Encontrei : Boolean;
      function Error     : Boolean;
      //
      function GetBy(IdEmpresa : Integer; Email: String) : iCadastrarEmailEmpresa;
      function Post : iCadastrarEmailEmpresa;
      function Put  : iCadastrarEmailEmpresa;
      function LoopEmailEmpresa : TJSONValue;
      //injeção de dependência
      function EmailEmpresa : iEntidadeEmailEmpresa<iCadastrarEmailEmpresa>;
      function &End : iCadastrarEmailEmpresa;
  end;

implementation

uses
  Imp.Controller,
  Model.Entidade.Imp.Email.Empresa;

{ TCadastrarEmailEmpresa }

constructor TCadastrarEmailEmpresa.Create;
begin
  FController   := TController.New;
  FEmailEmpresa := TEntidadeEmailEmpresa<iCadastrarEmailEmpresa>.New(Self);
  FDSEmailEmpresa := TDataSource.Create(nil);

  FEncontrei := False;
  FError     := False;
end;

destructor TCadastrarEmailEmpresa.Destroy;
begin
  inherited;
end;

class function TCadastrarEmailEmpresa.New: iCadastrarEmailEmpresa;
begin
  Result := Self.Create;
end;

function TCadastrarEmailEmpresa.JSONObjectPai(Value: TJSONObject): iCadastrarEmailEmpresa;
begin
  Result := Self;
  FJSONObjectPai := Value;
end;

function TCadastrarEmailEmpresa.JSONObjectPai: TJSONObject;
begin
  Result := FJSONObjectPai;
end;

function TCadastrarEmailEmpresa.GetBy(IdEmpresa: Integer; Email: String): iCadastrarEmailEmpresa;
begin
  Result := Self;
  try
    FController
      .FactoryEntidade
        .DAOEmailEmpresa
          .This
            .IdEmpresa(IdEmpresa)
            .Email(Email)
          .&End
        .GetbyParams
        .DataSet(FDSEmailEmpresa);
  except
    on E: Exception do
    begin
      WriteLn('Erro ao tentar encontrar o registro: ' + E.Message);
      FError := True;
    end;
  end;
  FEncontrei := Not FDSEMailEmpresa.DataSet.IsEmpty;
end;

function TCadastrarEmailEmpresa.Post: iCadastrarEmailEmpresa;
Var
  I : Integer;
begin
  Result := Self;
  FJSONArrayEmail := FJSONObjectPai.GetValue('emailempresa') as TJSONArray;
  try
    //Loop emails
    for I := 0 to FJSONArrayEmail.Count - 1 do
    begin
      //Extraindo os dados do(s) emai(s)  e salvando no banco de dados
      FJSONObjectEmail :=  FJSONArrayEmail.Items[I] as TJSONObject;
      //verifico se consta o email que esta vindo no json. Na tabela emailempresa, se não existir insiro.
      if not Getby(FEmailEmpresa.IdEmpresa , FJSONObjectEmail.GetValue<String>('email')).Encontrei Then
        FController
          .FactoryEntidade
            .DAOEmailEmpresa
              .This
                .IdEmpresa(FEmailEmpresa.IdEmpresa)
                .Email    (FJSONObjectEmail.GetValue<String>('email'))
                .TipoEmail(FJSONObjectEmail.GetValue<String>('tipoemail'))
                .Ativo    (1)
              .&End
            .Post;
    end;
  except
    on E: Exception do
    begin
      WriteLn('Erro ao tentar incluir o registro: ' + E.Message);
      FError := True;
    end;
  end;
end;

function TCadastrarEmailEmpresa.Put: iCadastrarEmailEmpresa;
Var
  I : Integer;
begin
  FJSONArrayEmail := FJSONObjectPai.Get('emailempresa').JsonValue as TJSONArray;
  try
    //Loop emails
    for I := 0 to FJSONArrayEmail.Count - 1 do
    begin
      //Extraindo os dados do(s) emai(s)  e salvando no banco de dados
      FJSONObjectEmail :=  FJSONArrayEmail.Items[I] as TJSONObject;
      FController
        .FactoryEntidade
          .DAOEmailEmpresa
            .This
              .Id       (FJSONObjectEmail.GetValue<Integer>('id'))
              .IdEmpresa(FJSONObjectPai.GetValue<Integer>('id'))
              .Email    (FJSONObjectEmail.GetValue<String> ('email'))
              .TipoEmail(FJSONObjectEmail.GetValue<String> ('tipoemail'))
              .Ativo    (FJSONObjectEmail.GetValue<Integer>('ativo'))
            .&End
          .Put;
      end;
    except
      on E: Exception do
      begin
        WriteLn('Erro ao tentar alterar o registro: ' + E.Message);
        FError := True;
      end;
  end;
end;

//Loop para pegar email relacionado com a tabela empresa
function TCadastrarEmailEmpresa.LoopEmailEmpresa: TJSONValue;
begin
  FQuantidadeRegistro:= FController
                           .FactoryEntidade
                             .DAOEmailEmpresa
                               .This
                                 .IdEmpresa(FEmailEmpresa.IdEmpresa)
                               .&End
                             .GetbyParams(Self)
                             .DataSet(FDSEmailEmpresa)
                             .QuantidadeRegistro;

  if not FDSEmailEmpresa.DataSet.IsEmpty then
  begin
    FJSONArrayEmail := TJSONArray.Create;
    FDSEmailEmpresa.DataSet.First;
    while not FDSEmailEmpresa.DataSet.Eof do
    begin
      FJSONObjectEMail := TJSONObject.Create;
      FJSONObjectEMail := FDSEmailEmpresa.DataSet.ToJSONObject;
      Result := FJSONObjectEMail;
      //tendo mais de um registro, adiciona ao array
      if FQuantidadeRegistro > 1 then
      begin
        FJSONArrayEmail.Add(FJSONObjectEMail);
        Result := FJSONArrayEmail;
      end;
      FDSEmailEmpresa.DataSet.Next;
    end;
  end;
end;

function TCadastrarEmailEmpresa.EmailEmpresa: iEntidadeEmailEmpresa<iCadastrarEmailEmpresa>;
begin
  Result := FEmailEmpresa;
end;

function TCadastrarEmailEmpresa.Encontrei: Boolean;
begin
  Result := FEncontrei;
end;

function TCadastrarEmailEmpresa.Error: Boolean;
begin
  Result := FError;
end;

function TCadastrarEmailEmpresa.&End: iCadastrarEmailEmpresa;
begin
  Result := Self;
end;

end.
