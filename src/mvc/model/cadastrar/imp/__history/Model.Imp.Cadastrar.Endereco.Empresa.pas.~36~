{*******************************************************}
{                    API PDV - JSON                     }
{                      Be More Web                      }
{          Início do projeto 30/04/2024 14:18           }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2024                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit Model.Imp.Cadastrar.Endereco.Empresa;

interface

uses
  Data.DB,

  System.JSON,
  System.SysUtils,

  DataSet.Serialize,
  Controller.Interfaces,
  Model.Cadastrar.Endereco.Empresa.Interfaces,
  Model.Entidade.Endereco.Empresa.Interfaces;

type
  TCadastrarEnderecoEmpresa = class(TInterfacedObject, iCadastrarEnderecoEmpresa)
    private
      FController       : iController;

      FEnderecoEmpresa  : iEntidadeEnderecoEmpresa<iCadastrarEnderecoEmpresa>;
      FJSONObjectPai      : TJSONObject;
      FJSONArrayEndereco  : TJSONArray;
      FJSONObjectEndereco : TJSONObject;
      //
      FEncontrei : Boolean;
      FError     : Boolean;
      FDSEnderecoEmpresa : TDataSource;
      FQuantidadeRegistro : Integer;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iCadastrarEnderecoEmpresa;

      function JSONObjectPai(Value : TJSONObject) : iCadastrarEnderecoEmpresa; overload;
      function JSONObjectPai                      : TJSONObject;               overload;
      function Encontrei : Boolean;
      function Error     : Boolean;
      //
      function Post : iCadastrarEnderecoEmpresa;
      //injeção de dependência
      function EnderecoEmpresa : iEntidadeEnderecoEmpresa<iCadastrarEnderecoEmpresa>;
      function &End : iCadastrarEnderecoEmpresa;
  end;

implementation

uses
  Imp.Controller,
  Model.Entidade.Imp.Endereco.Empresa;

{ TCadastrarEnderecoEmpresa }

constructor TCadastrarEnderecoEmpresa.Create;
begin
  FController      := TController.New;
  FEnderecoEmpresa := TEntidadeEnderecoEmpresa<iCadastrarEnderecoEmpresa>.New(Self);

  FDSEnderecoEmpresa := TDataSource.Create(nil);
  FEncontrei := False;
  FError     := False;
end;

destructor TCadastrarEnderecoEmpresa.Destroy;
begin
  inherited;
end;

class function TCadastrarEnderecoEmpresa.New: iCadastrarEnderecoEmpresa;
begin
  Result := Self.Create;
end;

function TCadastrarEnderecoEmpresa.JSONObjectPai(Value: TJSONObject): iCadastrarEnderecoEmpresa;
begin
  Result := Self;
  FJSONObjectPai := Value;
end;

function TCadastrarEnderecoEmpresa.JSONObjectPai: TJSONObject;
begin
  Result := FJSONObjectPai;
end;

//Inserindo dados na tabela endereco
function TCadastrarEnderecoEmpresa.Post: iCadastrarEnderecoEmpresa;
begin
  Result := Self;
  //Inserindo dados na tabela enderecoempresa caso não existir
  try
    if not FController
             .FactoryPesquisar
               .PesquisarEnderecoEmpresa
                 .EnderecoEmpresa
                   .IdEmpresa(FEnderecoEmpresa.IdEmpresa)
                   .IdEndereco(FEnderecoEmpresa.IdEndereco)
                 .&End
                .Getby(FEnderecoEmpresa.IdEmpresa, FEnderecoEmpresa.IdEndereco).Found then
      FController
        .FactoryDAO
          .DAOEnderecoEmpresa
            .This
              .IdEmpresa (FEnderecoEmpresa.IdEmpresa)
              .IdEndereco(FEnderecoEmpresa.IdEndereco)
            .&End
          .Post;
  except
    on E: Exception do
    begin
      WriteLn('Erro ao tentar incluir enderecoempresa: ' + E.Message);
      FError := True;
    end;
  end;
end;

//Loop para montar JSON endereco para alimentar JSON Pai empresa
function TCadastrarEnderecoEmpresa.LoopEnderecoEmpresa: TJSONValue;
begin
  FQuantidadeRegistro:= FController
                           .FactoryDAO
                             .DAOEnderecoEmpresa
                               .This
                                 .IdEmpresa(FEnderecoEmpresa.IdEmpresa)
                               .&End
                             .GetbyParams(Self)
                             .DataSet(FDSEnderecoEmpresa)
                             .QuantidadeRegistro;

  if not FDSEnderecoEmpresa.DataSet.IsEmpty then
  begin
    FJSONArrayEndereco := TJSONArray.Create;
    FDSEnderecoEmpresa.DataSet.First;
    while not FDSEnderecoEmpresa.DataSet.Eof do
    begin
      FJSONObjectEndereco := TJSONObject.Create;
      FJSONObjectEndereco := FDSEnderecoEmpresa.DataSet.ToJSONObject;
      Result := FJSONObjectEndereco;
      // Se tiver mais de um registro, adiciona ao array
      if FQuantidadeRegistro > 1 then
      begin
        FJSONArrayEndereco.Add(FJSONObjectEndereco);
        Result := FJSONArrayEndereco;
      end;
      FDSEnderecoEmpresa.DataSet.Next;
    end;
  end;
end;

function TCadastrarEnderecoEmpresa.EnderecoEmpresa: iEntidadeEnderecoEmpresa<iCadastrarEnderecoEmpresa>;
begin
  Result := FEnderecoEmpresa;
end;

function TCadastrarEnderecoEmpresa.Encontrei: Boolean;
begin
  Result := FEncontrei;
end;

function TCadastrarEnderecoEmpresa.Error: Boolean;
begin
  Result := FError;
end;

function TCadastrarEnderecoEmpresa.&End: iCadastrarEnderecoEmpresa;
begin
  Result := Self;
end;

end.
