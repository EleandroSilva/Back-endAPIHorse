{*******************************************************}
{                    API PDV - JSON                     }
{                      Be More Web                      }
{          Início do projeto 30/04/2024 14:18           }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2024                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit Model.Imp.Cadastrar.Numero;

interface

uses
  Data.DB,

  System.JSON,
  System.SysUtils,

  Controller.Interfaces,
  Model.Cadastrar.Numero.Interfaces,
  Model.Entidade.Numero.Interfaces,
  Controller.Cadastro.Interfaces,
  Model.Entidade.Empresa.Interfaces;

type
  TCadastrarNumero = class(TInterfacedObject, iCadastrarNumero)
    private
      FController     : iController;
      FControllerCadastro : iControllerCadastro;
      FNumero         : iEntidadeNumero<iCadastrarNumero>;
      FEmpresa        : iEntidadeEmpresa<iCadastrarNumero>;
      FJSONArrayNumero  : TJSONArray;
      FJSONObjectNumero : TJSONObject;
      FJSONObjectPai    : TJSONObject;
      //
      FDSNumero  : TDataSource;

      FIdNumero  : Integer;
      FEncontrei : Boolean;
      FError     : Boolean;
      procedure CadastrarEnderecoEmpresa;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iCadastrarNumero;

      function JSONObjectPai(Value : TJSONObject) : iCadastrarNumero; overload;
      function JSONObjectPai                      : TJSONObject;      overload;
      function Encontrei : Boolean;
      function Error     : Boolean;
      //
      function Getby(IdEndereco : Integer; NumeroEndereco : String) : iCadastrarNumero;
      function Post : iCadastrarNumero;
      function Put  : iCadastrarNumero;
      //injeção de dependência
      function Numero  : iEntidadeNumero<iCadastrarNumero>;
      function Empresa : iEntidadeEmpresa<iCadastrarNumero>;
      function &End : iCadastrarNumero;
  end;

implementation

uses
  Imp.Controller,
  Model.Entidade.Imp.Numero,
  Imp.Controller.Cadastro,
  Model.Entidade.Imp.Empresa;

{ TCadastrarNumero }

constructor TCadastrarNumero.Create;
begin
  FController     := TController.New;
  FControllerCadastro := TControllerCadastro.New;
  FNumero   := TEntidadeNumero<iCadastrarNumero>.New(Self);
  FEmpresa  := TEntidadeEmpresa<iCadastrarNumero>.New(Self);
  FDSNumero := TDataSource.Create(nil);
  FEncontrei := False;
  FError     := False;
end;

destructor TCadastrarNumero.Destroy;
begin
  inherited;
end;

class function TCadastrarNumero.New: iCadastrarNumero;
begin
  Result := Self.Create;
end;

function TCadastrarNumero.JSONObjectPai(Value: TJSONObject): iCadastrarNumero;
begin
  Result := Self;
  FJSONObjectPai := Value;
end;

function TCadastrarNumero.JSONObjectPai: TJSONObject;
begin
  Result := FJSONObjectPai;
end;

function TCadastrarNumero.Getby(IdEndereco : Integer; NumeroEndereco : String): iCadastrarNumero;
begin
  Result := Self;
  FEncontrei := False;
  try
    FController
      .FactoryEntidade
        .DAONumero
          .This
            .IdEndereco    (IdEndereco)
            .NumeroEndereco(NumeroEndereco)
          .&End
        .GetbyParams
        .DataSet(FDSNumero);
  except
    on E: Exception do
    begin
      WriteLn('Erro ao tentar alterar número da tabela numero: ' + E.Message);
      FError := True;
    end;
  end;
  FEncontrei := not FDSNumero.DataSet.IsEmpty;
end;

function TCadastrarNumero.Post: iCadastrarNumero;
Var
  I : Integer;
begin
  FJSONArrayNumero  := FJSONObjectPai.GetValue('numero') as TJSONArray;
  FJSONObjectNumero := FJSONArrayNumero.Items[I] as TJSONObject;
  try
    //verifico se consta este número cadastrado na tabela numero(se não estiver insiro o mesmo)
    if not Getby(FNumero.IdEndereco, FJSONObjectNumero.GetValue<String>('numeroendereco')).Encontrei then
    begin
      //Inserindo dados na tabela numero
      FController
        .FactoryEntidade
          .DAONumero
            .This
              .IdEndereco         (FNumero.IdEndereco)
              .NumeroEndereco     (FJSONObjectNumero.GetValue<String>('numeroendereco'))
              .ComplementoEndereco(FJSONObjectNumero.GetValue<String>('complementoendereco'))
            .&End
          .Post;

       //Inserindo o numero com idempresa, caso não existir
       CadastrarEnderecoEmpresa;
    end;
  except
    on E: Exception do
    begin
      WriteLn('Erro ao tentar alterar número da tabela numero: ' + E.Message);
      FError := True;
    end;
  end;
end;

function TCadastrarNumero.Put: iCadastrarNumero;
begin
  FJSONObjectNumero := TJSONObject(FJSONObjectPai.GetValue('numero'));
  try
    FController
      .FactoryEntidade
        .DAONumero
          .This
            .Id                 (FJSONObjectNumero.GetValue<Integer>('id'))
            .IdEndereco         (FNumero.IdEndereco)
            .NumeroEndereco     (FJSONObjectNumero.GetValue<String>('numeroendereco'))
            .ComplementoEndereco(FJSONObjectNumero.GetValue<String>('complementoendereco'))
          .&End
        .Put;

    //Inserindo o numero com idempresa, caso não existir-esta tabela não altera, apenas inclui caso não existir
    CadastrarEnderecoEmpresa;
  except
    on E: Exception do
    begin
      WriteLn('Erro ao tentar alterar número da tabela numero: ' + E.Message);
      FError := True;
    end;
  end;
end;

function TCadastrarNumero.Encontrei: Boolean;
begin
  Result := FEncontrei;
end;

function TCadastrarNumero.Error: Boolean;
begin
  Result := FError;
end;

//Injeção de dependência
function TCadastrarNumero.Numero: iEntidadeNumero<iCadastrarNumero>;
begin
  Result := FNumero;
end;

//cadastro enderecoempresa-relacionamento entre endereco e empresa
procedure TCadastrarNumero.CadastrarEnderecoEmpresa;
begin
  FControllerCadastro
    .FactoryCadastro
      .CadastrarEnderecoEmpresa
        .EnderecoEmpresa
          .IdEmpresa(FEmpresa.Id)
          .IdEndereco(FNumero.IdEndereco)
        .&End
      .JSONObjectPai(FJSONObjectNumero)
      .Post;
end;

function TCadastrarNumero.Empresa: iEntidadeEmpresa<iCadastrarNumero>;
begin
  Result := FEmpresa;
end;

function TCadastrarNumero.&End: iCadastrarNumero;
begin
  Result := Self;
end;

end.
