{*******************************************************}
{                    API PDV - JSON                     }
{                      Be More Web                      }
{          Início do projeto 26/04/2024 17:41           }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2024                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit Model.Imp.Alterar.Empresa;

interface

uses
  Data.DB,
  System.JSON,
  System.SysUtils,

  Model.Alterar.Empresa.Interfaces,
  Model.Entidade.Empresa.Interfaces,
  Controller.Interfaces;

type
  TAlterarEmpresa = class(TInterfacedObject, iAlterarEmpresa)
    private
      FController : iController;
      FEmpresa    : iEntidadeEmpresa<iAlterarEmpresa>;
      FDSEmpresa  : TDataSource;
      FJSONObject : TJSONObject;
      FFound : Boolean;
      FError : Boolean;

      function AlterarEndereco   : Boolean;
      function AlterarEmail      : Boolean;
      function AlterarTelefone   : Boolean;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iAlterarEmpresa;

      function JSONObject(Value : TJSONObject) : iAlterarEmpresa; overload;
      function JSONObject                      : TJSONObject;     overload;

      function Put    : iAlterarEmpresa;
      function Found  : Boolean;
      function Error  : Boolean;

      //injeção de dependência
      function Empresa : iEntidadeEmpresa<iAlterarEmpresa>;
      function &End    : iAlterarEmpresa;
  end;

implementation

uses
  Model.Entidade.Imp.Empresa,
  Imp.Controller;

{ TAlterarEmpresa }
constructor TAlterarEmpresa.Create;
begin
  FController := TController.New;
  FEmpresa    := TEntidadeEmpresa<iAlterarEmpresa>.New(Self);
  FDSEmpresa  := TDataSource.Create(nil);

  FFound := False;
  FError := False;
end;

destructor TAlterarEmpresa.Destroy;
begin
  inherited;
end;

class function TAlterarEmpresa.New: iAlterarEmpresa;
begin
  Result := Self.Create;
end;

function TAlterarEmpresa.JSONObject(Value: TJSONObject): iAlterarEmpresa;
begin
  Result := Self;
  FJSONObject := Value;
end;

function TAlterarEmpresa.JSONObject: TJSONObject;
begin
  Result := FJSONObject;
end;

function TAlterarEmpresa.Put: iAlterarEmpresa;
begin
  Result := Self;
  if not FController
          .FactoryPesquisar
            .PesquisarEmpresa
              .GetbyId(FEmpresa.Id)
                .Found then
  begin
    try
      FController
        .FactoryDAO
          .DAOEmpresa
            .This
              .Id                   (FJSONObject.GetValue<Integer>  ('id'))
              .CNPJ                 (FJSONObject.GetValue<String>   ('cnpj'))
              .InscricaoEstadual    (FJSONObject.GetValue<String>   ('inscricaoestadual'))
              .NomeEmpresarial      (FJSONObject.GetValue<String>   ('nomeempresarial'))
              .NomeFantasia         (FJSONObject.GetValue<String>   ('nomefantasia'))
              .IdNaturezaJuridica   (FJSONObject.GetValue<Integer>  ('idnaturezajuridica'))
              .DataHoraEmissao      (FJSONObject.GetValue<TDateTime>('datahoraemissao'))
              .DataSituacaoCadastral(FJSONObject.GetValue<TDateTime>('datasituacaocadastral'))
              .Ativo                (FJSONObject.GetValue<Integer>  ('ativo'))
            .&End
          .Put
          .DataSet(FDSEmpresa);
      //Chamo function para alterar--> endereco; email e telefone na sequência
      if not AlterarEndereco then
        if not AlterarEmail then
          AlterarTelefone;
    except
      on E: Exception do
      begin
        WriteLn('Erro ao tentar alterar registro: ' + E.Message);
        FError := True;
      end;
    end;
  end;
end;

function TAlterarEmpresa.Error: Boolean;
begin
  Result := FError;
end;

function TAlterarEmpresa.Found: Boolean;
begin
  Result := FFound;
end;

//Alterar endereco
function TAlterarEmpresa.AlterarEndereco: Boolean;
begin
  Result := False;
  Result := FController
              .FactoryCadastrar
                .CadastrarEndereco
                  .Empresa.Id(FEmpresa.Id)
                  .&End
                .JSONObjectPai(FJSONObject)
                .Put
                .Error;
end;

//Alterar email
function TAlterarEmpresa.AlterarEmail: Boolean;
begin
  //Obtém os dados JSON do corpo da requisição da tabela('emailempresa')
  Result := False;
  {
  Result := FController
              .FactoryAlterar
                .
                  .
                  .IdEmpresa(FEmpresa.Id)
                  .&End
                .JSONObjectPai(FJSONObject)
                .Put
                .Error; }
end;

//Alterar Telefone
function TAlterarEmpresa.AlterarTelefone: Boolean;
begin
  //Obtém os dados JSON do corpo da requisição da tabela('emailempresa')
  Result := False;
  Result := FController
              .FactoryCadastrar
                .CadastrarTelefoneEmpresa
                  .TelefoneEmpresa
                  .IdEmpresa(FEmpresa.Id)
                  .&End
                .JSONObjectPai(FJSONObject)
                .Put
                .Error;
end;

//Injeção de dependência
function TAlterarEmpresa.Empresa: iEntidadeEmpresa<iAlterarEmpresa>;
begin
  Result := FEmpresa;
end;

function TAlterarEmpresa.&End: iAlterarEmpresa;
begin
  Result := Self;
end;

end.
