{*******************************************************}
{                    API PDV - JSON                     }
{                      ES Sistemas                      }
{          Início do projeto 13/03/2024 10:43           }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2024                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit Model.Factory.Imp.Entidade;

interface

uses
  Model.Factory.Entidade.Interfaces,
  Model.DAO.Usuario.Interfaces,
  Model.DAO.Imp.Usuario,
  Model.DAO.Empresa.Interfaces,
  Model.DAO.Imp.Empresa,
  Model.DAO.Categoria.Produto.Interfaces,
  Model.DAO.Imp.Categoria.Produto,
  Model.DAO.Marca.Produto.Interfaces,
  Model.DAO.Imp.Marca.Produto,
  Model.DAO.Unidade.Produto.Interfaces,
  Model.DAO.Imp.Unidade.Produto,
  Model.DAO.Endereco.Interfaces,
  Model.DAO.Imp.Endereco,
  Model.DAO.Numero.Interfaces,
  Model.DAO.Imp.Numero,
  Model.DAO.Produto.Interfaces,
  Model.DAO.Imp.Produto,
  Model.DAO.Endereco.Empresa.Interfaces,
  Model.DAO.Email.Empresa.Interfaces, Model.DAO.Imp.Email.Empresa,
  Model.DAO.Imp.Endereco.Empresa;

type
  TFactoryEntidade = class(TInterfacedObject, iFactoryEntidade)
    private
      FDAOUsuario          : iDAOUsuario;
      FDAOEmpresa          : iDAOEmpresa;
      FDAOEnderecoEmpresa  : iDAOEnderecoEmpresa;
      FDAOEmailEmpresa     : iDAOEmailEmpresa;
      FDAOCategoriaProduto : iDAOCategoriaProduto;
      FDAOMarcaProduto     : iDAOMarcaProduto;
      FDAOUnidadeProduto   : iDAOUnidadeProduto;
      FDAOEndereco         : iDAOEndereco;
      FDAONumero           : iDAONumero;
      FDAOProduto          : iDAOProduto;
    public
      constructor Create;
      destructor Destroy; override;
      class function New : iFactoryEntidade;

      function DAOUsuario          : iDAOUsuario;
      function DAOEmpresa          : iDAOEmpresa;
      function DAOEnderecoEmpresa  : iDAOEnderecoEmpresa;
      function DAOEmailEmpresa     : iDAOEmailEmpresa;
      function DAOCategoriaProduto : iDAOCategoriaProduto;
      function DAOMarcaProduto     : iDAOMarcaProduto;
      function DAOUnidadeProduto   : iDAOUnidadeProduto;
      function DAOEndereco         : iDAOEndereco;
      function DAONumero           : iDAONumero;
      function DAOProduto          : iDAOProduto;
  end;

implementation

{ TFactoryEntidade }

constructor TFactoryEntidade.Create;
begin
  //
end;

destructor TFactoryEntidade.Destroy;
begin
  //
  inherited;
end;

class function TFactoryEntidade.New: iFactoryEntidade;
begin
  Result := Self.Create;
end;

function TFactoryEntidade.DAOUsuario: iDAOUsuario;
begin
  if not Assigned(FDAOUsuario) then
    FDAOUsuario := TDAOUsuario.New;

  Result := FDAOUsuario;
end;

function TFactoryEntidade.DAOEmpresa: iDAOEmpresa;
begin
  if not Assigned(FDAOEmpresa) then
    FDAOEmpresa := TDAOEmpresa.New;

  Result := FDAOEmpresa;
end;

function TFactoryEntidade.DAOEnderecoEmpresa: iDAOEnderecoEmpresa;
begin
  if not Assigned(FDAOEnderecoEmpresa) then
    FDAOEnderecoEmpresa := TDAOEnderecoEmpresa.New;

  Result := FDAOEnderecoEmpresa;
end;

function TFactoryEntidade.DAOEmailEmpresa: iDAOEmailEmpresa;
begin
  if not Assigned(FDAOEmailEmpresa) then
    FDAOEmailEmpresa := TDAOEmailEmpresa.New;

  Result := FDAOEmailEmpresa;
end;

function TFactoryEntidade.DAOCategoriaProduto: iDAOCategoriaProduto;
begin
  if not Assigned(FDAOCategoriaProduto) then
    FDAOCategoriaProduto := TDAOCategoriaProduto.New;

  Result := FDAOCategoriaProduto;
end;

function TFactoryEntidade.DAOMarcaProduto: iDAOMarcaProduto;
begin
  if not Assigned(FDAOMarcaProduto) then
    FDAOMarcaProduto := TDAOMarcaProduto.New;

  Result := FDAOMarcaProduto;
end;

function TFactoryEntidade.DAOUnidadeProduto: iDAOUnidadeProduto;
begin
  if not Assigned(FDAOUnidadeProduto) then
    FDAOUnidadeProduto := TDAOUnidadeProduto.New;

  Result := FDAOUnidadeProduto;
end;

function TFactoryEntidade.DAOEndereco: iDAOEndereco;
begin
  if not Assigned(FDAOEndereco) then
    FDAOEndereco := TDAOEndereco.New;

  Result := FDAOEndereco;
end;

function TFactoryEntidade.DAONumero: iDAONumero;
begin
  if not Assigned(FDAONumero) then
    FDAONumero := TDAONumero.New;

  Result := FDAONumero;
end;

function TFactoryEntidade.DAOProduto: iDAOProduto;
begin
  if not Assigned(FDAOProduto) then
    FDAOProduto := TDAOProduto.New;

  Result := FDAOProduto;
end;

end.
