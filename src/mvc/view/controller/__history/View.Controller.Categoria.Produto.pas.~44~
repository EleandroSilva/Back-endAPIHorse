{*******************************************************}
{                    API PDV - JSON                     }
{                      ES Sistemas                      }
{          Início do projeto 18/03/2024 13:39           }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2024                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit View.Controller.Categoria.Produto;

interface

uses
  System.SysUtils,
  System.JSON,

  Data.DB,

  FireDAC.Comp.Client,

  DataSet.Serialize,
  Horse,
  Horse.BasicAuthentication,

  Controller.Interfaces,
  Imp.Controller;

type
  TViewControllerCategoriaProduto = class
    private
      FTexto      : String;
      FBody       : TJSONValue;
      FJSONObject : TJSONObject;
      FJSONArray  : TJSONArray;
      FDataSource : TDataSource;
      FController : iController;
      mtTable     : TFDMemTable;

      procedure GetAll (Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure GetbyId(Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure Post   (Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure Put    (Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure Delete (Req: THorseRequest; Res: THorseResponse; Next : TProc);

      procedure Registry;
    public
      constructor Create;
      destructor Destroy; override;
  end;

implementation

{ TViewControllerCategoriaProduto }

constructor TViewControllerCategoriaProduto.Create;
begin
  FController := TController.New;
  FDataSource := TDataSource.Create(nil);
  mtTable     := TFDMemTable.Create(nil);
  Registry;
end;

destructor TViewControllerCategoriaProduto.Destroy;
begin
  FreeAndNil(mtTable);
  FreeAndNil(FDataSource);
  inherited;
end;

procedure TViewControllerCategoriaProduto.GetAll(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  //Lê os dados JSON da requisição (tabela pai='empresa')
  FJSONObject := TJSONObject.ParseJSONValue(TEncoding.ASCII.GetBytes(Req.Body), 0) as TJSONObject;
  //FJSONObject := TJSONObject.ParseJSONValue(Req.Body) as TJSONObject;
  try
    try
      if ((Req.Query.Field('nomecategoria').AsString<>'') or (Req.Query.Field('idempresa').AsInteger>0)) then
        FController
          .FactoryEntidade
            .DAOCategoriaProduto
              .This
                .NomeCategoria(Req.Query.Field('nomecategoria').AsString)
                .IdEmpresa(Req.Query.Field('idempresa').AsInteger)
              .&End
              .GetbyParams
              .DataSet(FDataSource) else
        FController
          .FactoryEntidade
            .DAOCategoriaProduto
              .This
                .IdEmpresa(Req.Query.Field('idempresa').AsInteger)
              .&End
              .GetAll
            .DataSet(FDataSource);


     if FDataSource.DataSet.FieldByName('quantidaderegistro').AsInteger > 1  then
     begin
       FJSONArray := FDataSource.DataSet.ToJSONArray();
       FTexto     := FJSONArray.ToString;
       Res.Send<TJSONArray>(FJSONArray);
     end
     else
     begin
       FJSONObject := FDataSource.DataSet.ToJSONObject();
       FTexto      := FJSONObject.ToString;
       Res.Send<TJSONObject>(FJSONObject);
     end;
   except
     Res.Status(500).Send('Ocorreu um erro interno no servidor.');
     Exit;
   End;
  finally
    if FDataSource.DataSet.IsEmpty then
      Res.Status(404).Send('Registro não encontrado!') else
      Res.Status(200).Send('Registro encontrado com sucesso!');
  end;
end;

procedure TViewControllerCategoriaProduto.GetbyId(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  Try
     try
       FController
         .FactoryEntidade
           .DAOCategoriaProduto
             .This
               .IdEmpresa(Req.Query.Field('idempresa').AsInteger)
             .&End
             .GetbyId(Req.Params['id'].ToInt64)
           .DataSet(FDataSource);

       FJSONObject := FDataSource.DataSet.ToJSONObject();
       Res.Send<TJSONObject>(FJSONObject);
   except
     Res.Status(500).Send('Ocorreu um erro interno no servidor.');
     Exit;
   End;
   Finally
     if FDataSource.DataSet.IsEmpty then
       Res.Status(404).Send('Registro não encontrado!') else
       Res.Status(200).Send('Registro encontrado com sucesso!');
   End;
end;

procedure TViewControllerCategoriaProduto.Post(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  try
    try
      FJSONObject := Req.Body<TJSONObject>;

      FController
        .FactoryEntidade
          .DAOCategoriaProduto
            .This
              .IdEmpresa    (FJSONObject.GetValue<integer>('idempresa'))
              .NomeCategoria(FJSONObject.GetValue<String> ('nomecategoria'))
              .Ativo        (1)
            .&End
          .Post;
  except
    Res.Status(500).Send('Ocorreu um erro interno no servidor.');
    Exit;
  end;
  finally
    Res.Status(200).Send('Registro incluído com sucesso!');
  end;
end;

procedure TViewControllerCategoriaProduto.Put(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  try
    try
      FJSONObject := Req.Body<TJSONObject>;

      FController
        .FactoryEntidade
          .DAOCategoriaProduto
            .This
              .Id           (FJSONObject.GetValue<Integer>('id'))
              .IdEmpresa    (FJSONObject.GetValue<Integer>('idempresa'))
              .NomeCategoria(FJSONObject.GetValue<String> ('nomecategoria'))
              .Ativo        (FJSONObject.GetValue<Integer>('ativo'))
            .&End
          .Put;
  except
    Res.Status(500).Send('Ocorreu um erro interno no servidor.');
    Exit;
  end;
  finally
    Res.Status(200).Send('Registro alterado com sucesso!');
  end;
end;

procedure TViewControllerCategoriaProduto.Delete(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  try
    try
      FController
        .FactoryEntidade
          .DAOCategoriaProduto
            .This
              .Id(Req.Params['id'].ToInt64)
            .&End
          .Delete;
    except
    Res.Status(500).Send('Ocorreu um erro interno no servidor.');
    Exit;
  end;
  finally
    Res.Status(200).Send('Registro excluído com sucesso!');
  end;
end;

procedure TViewControllerCategoriaProduto.Registry;
begin
  THorse
      .Group
      .Prefix('bmw')
      .Get   ('/categoria-produto'     , GetAll)
      .Get   ('/categoria-produto/:id' , GetbyId)
      .Post  ('categoria-produto'      , Post)
      .Put   ('categoria-produto/:id'  , Put)
      .Delete('categoria-produto/:id'  , Delete);
end;

end.
