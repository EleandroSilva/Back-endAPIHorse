{*******************************************************}
{                    API PDV - JSON                     }
{                      ES Sistemas                      }
{          Início do projeto 05/04/2024 15:27           }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2024                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit View.Controller.Pessoa;

interface

uses
  System.SysUtils,
  System.JSON,

  Data.DB,

  FireDAC.Comp.Client,

  DataSet.Serialize,
  Horse,
  Horse.BasicAuthentication,

  Controller.Interfaces,
  Imp.Controller;

type
  TViewControllerPessoa = class
    private
      FTexto      : String;
      FJSONObject : TJSONObject;
      FJSONArray  : TJSONArray;
      FBody       : TJSONValue;
      FDataSource : TDataSource;
      FController : iController;

      procedure GetAll (Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure GetbyId(Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure Post   (Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure Put    (Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure Delete (Req: THorseRequest; Res: THorseResponse; Next : TProc);

      procedure Registry;
    public
      constructor Create;
      destructor Destroy; override;
  end;

implementation

constructor TViewControllerEmpresa.Create;
begin
  FController := TController.New;
  FDataSource := TDataSource.Create(nil);
  Registry;
end;

destructor TViewControllerEmpresa.Destroy;
begin
  inherited;
end;

procedure TViewControllerEmpresa.GetAll(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  try
    try
      if ((Req.Query.Field('cnpj').AsString<>'') or (Req.Query.Field('nomeempresarial').AsString<>'')) then
        FController
          .FactoryEntidade
            .DAOEmpresa
              .This
                .CNPJ           (Req.Query.Field('cnpj').AsString)
                .NomeEmpresarial(Req.Query.Field('nomeempresarial').AsString)
              .&End
            .GetbyParams
            .DataSet(FDataSource)
      else
        FController
          .FactoryEntidade
            .DAOEmpresa
              .GetAll
              .DataSet(FDataSource);

     FJSONArray := FDataSource.DataSet.ToJSONArray();
     FTexto     := FJSONArray.ToString;
     Res.Send<TJSONArray>(FJSONArray);
    except
      raise Res.Status(500).Send('Ocorreu um erro interno no servidor.');
    end;
  finally
    FJSONArray := FDataSource.DataSet.ToJSONArray();
    Res.Send<TJSONArray>(FJSONArray);
    Res.Status(200).Send('Registro encontrado com sucesso!');
  end;
end;

procedure TViewControllerEmpresa.GetbyId(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
   Try
     Try
       FController
         .FactoryEntidade
           .DAOEmpresa
             .GetbyId(Req.Params['id'].ToInt64)
             .DataSet(FDataSource);
     except
       raise Res.Status(500).Send('Ocorreu um erro interno no servidor.');
     end;
   Finally
     FJSONArray := FDataSource.DataSet.ToJSONArray();
     Res.Send<TJSONArray>(FJSONArray);
     Res.Status(200).Send('Registro encontrado com sucesso!');
   end;
end;

procedure TViewControllerEmpresa.Post(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  I : Integer;
begin
  //Lê os dados JSON da requisição (tabela pai='endereco')
  FJSONObject := Req.Body<TJSONObject>;
  FJSONArray  := FJSONObject.GetValue('enderecoempresa') as TJSONArray;//Obtém os dados JSON do corpo da requisição da tabela('enderecoempresa')
  try
    //tabela pai
    try
      FController
          .FactoryEntidade
            .DAOEmpresa
              .This
                .CNPJ                 (FJSONObject.GetValue<String>   ('CNPJ'))
                .InscricaoEstadual    (FJSONObject.GetValue<String>   ('inscricaoestadual'))
                .NomeEmpresarial      (FJSONObject.GetValue<String>   ('nomeempresarial'))
                .NomeFantasia         (FJSONObject.GetValue<String>   ('nomefantasia'))
                .NaturezaJuridica     (FJSONObject.GetValue<String>   ('naturezajuridica'))
                .DataEmissao          (FJSONObject.GetValue<TDateTime>('dataemisao'))
                .DataSituacaoCadastral(FJSONObject.GetValue<TDateTime>('datasituacaocadastral'))
                .Ativo                (FJSONObject.GetValue<integer>  ('ativo'))
              .&End
              .Post
            .DataSet(FDataSource);
      except
        raise Res.Status(500).Send('Ocorreu um erro interno no servidor.');
    end;

    try
      // Loop pelos itens do pedido e salva no banco de dados
      for I := 0 to FJSONArray.Count - 1 do
      begin
        //Extraindo os dados do endereço e salvando no banco de dados
        FController
               .FactoryEntidade
                 .DAOEnderecoEmpresa
                   .This
                     .IdEndereco(Req.Query.Field('id').AsInteger)
                     .IdEmpresa (FDataSource.DataSet.FieldByName('id').AsInteger)
                     .&End
                   .Post;
      end;
    except
      raise Res.Status(500).Send('Ocorreu um erro interno no servidor.');
    end;

    FJSONArray  := FJSONObject.GetValue('emailempresa') as TJSONArray;//Obtém os dados JSON do corpo da requisição da tabela('emailempresa')
    try
      //Loop pelos itens do pedido e salva no banco de dados
      for I := 0 to FJSONArray.Count - 1 do
      begin
        //Extraindo os dados do endereço e salvando no banco de dados
        FController
               .FactoryEntidade
                 .DAOEmailEmpresa
                   .This
                     .IdEmpresa(FDataSource.DataSet.FieldByName('id').AsInteger)
                     .Email    (Req.Query.Field('email').AsString)
                     .&End
                   .Post;
      end;
    except
      raise Res.Status(500).Send('Ocorreu um erro interno no servidor.');
    end;

    FJSONArray  := FJSONObject.GetValue('telefoneempresa') as TJSONArray;//Obtém os dados JSON do corpo da requisição da tabela('telefoneempresa')
    try
      //Loop pelos itens do pedido e salva no banco de dados
      for I := 0 to FJSONArray.Count - 1 do
      begin
        //Extraindo os dados do endereço e salvando no banco de dados
        FController
               .FactoryEntidade
                 .DAOTelefoneEmpresa
                   .This
                     .IdEmpresa(FDataSource.DataSet.FieldByName('id').AsInteger)
                     .Operadora(Req.Query.Field('operadora').AsString)
                     .DDD      (Req.Query.Field('ddd').AsString)
                     .Numero   (Req.Query.Field('numero').AsString)
                     .Tipo     (Req.Query.Field('tipo').AsString)
                     .Ativo    (Req.Query.Field('ativo').AsInteger)
                     .&End
                   .Post;
      end;
    except
      raise Res.Status(500).Send('Ocorreu um erro interno no servidor.');
    end;
  finally
    Res.Status(200).Send('Registro incluído com sucesso!');
  end;
end;

procedure TViewControllerEmpresa.Put(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  try
    try
      FBody := Req.Body<TJSONObject>;

      FController
        .FactoryEntidade
          .DAOEmpresa
            .This
              .Id                   (Req.Params['id'].ToInt64)
              .CNPJ                 (FBody.GetValue<String>   ('cnpj'))
              .InscricaoEstadual    (FBody.GetValue<String>   ('inscricaoestadual'))
              .NomeEmpresarial      (FBody.GetValue<String>   ('nomeempresarial'))
              .NomeFantasia         (FBody.GetValue<String>   ('nomefantasia'))
              .NaturezaJuridica     (FBody.GetValue<String>   ('naturezajuridica'))
              .DataEmissao          (FBody.GetValue<TDateTime>('dataemissao'))
              .DataSituacaoCadastral(FBody.GetValue<TDateTime>('datasituacaocadastral'))
              .Ativo                (FBody.GetValue<Integer>  ('ativo'))
            .&End
          .Put;
  except
    raise Res.Status(500).Send('Ocorreu um erro interno no servidor.');
  end;
  finally
    Res.Status(200).Send('Registro alterado com sucesso!');
  end;
end;

procedure TViewControllerEmpresa.Delete(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  try
    try
      FController
        .FactoryEntidade
          .DAOEmpresa
            .This
              .Id(Req.Params['id'].ToInt64)
            .&End
          .Delete;
    except
      raise Res.Status(500).Send('Ocorreu um erro interno no servidor.');
    End;
  Finally
    Res.Status(200).Send('Registro excluído com sucesso!');
  End;
end;

procedure TViewControllerEmpresa.Registry;
begin
  THorse
      .Group
        .Prefix  ('ess')
          .Get   ('/empresas/:id' , GetbyId)
          .Get   ('/empresas'     , GetAll)
          .Post  ('empresas'      , Post)
          .Put   ('empresas/:id'  , Put)
          .Delete('empresas/:id'  , Delete);
end;

end.
