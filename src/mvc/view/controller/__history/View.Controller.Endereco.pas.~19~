unit View.Controller.Endereco;

interface

uses
  System.SysUtils,
  System.JSON,

  Data.DB,

  FireDAC.Comp.Client,

  DataSet.Serialize,
  Horse,
  Horse.BasicAuthentication,

  Controller.Interfaces,
  Imp.Controller;

type
  TViewControllerEndereco = class
    private
      FTexto      : String;
      FJSONObject : TJSONObject;
      FJSONArray  : TJSONArray;
      FBody       : TJSONValue;
      FDataSource : TDataSource;
      FController : iController;

      procedure GetAll (Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure GetbyId(Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure Post   (Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure Put    (Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure Delete (Req: THorseRequest; Res: THorseResponse; Next : TProc);

      procedure Registry;
    public
      constructor Create;
      destructor Destroy; override;
  end;

implementation

{ TViewControllerEndereco }

constructor TViewControllerEndereco.Create;
begin
  FController := TController.New;
  FDataSource := TDataSource.Create(nil);
  Registry;
end;

destructor TViewControllerEndereco.Destroy;
begin
  inherited;
end;

procedure TViewControllerEndereco.GetAll(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  try
    try
      if ((Req.Query.Field('cep').AsString<>'') or (Req.Query.Field('endereco').AsString<>'')) then
        FController
          .FactoryEntidade
            .DAOEndereco
              .This
                .Cep     (Req.Query.Field('cep').AsString)
                .Endereco(Req.Query.Field('endereco').AsString)
              .&End
            .GetbyParams
            .DataSet(FDataSource)
      else
        FController
          .FactoryEntidade
            .DAOEndereco
              .GetAll
              .DataSet(FDataSource);

     FJSONArray := FDataSource.DataSet.ToJSONArray();
     FTexto     := FJSONArray.ToString;
     Res.Send<TJSONArray>(FJSONArray);
    except
     raise Exception.Create(' ao tentar encontrar registro!');
   End;
  finally
    //informar msg de resposta do Horse, ver como funciona
  end;
end;

procedure TViewControllerEndereco.GetbyId(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
   Try
     FController
       .FactoryEntidade
         .DAOEndereco
           .GetbyId(Req.Params['id'].ToInt64)
           .DataSet(FDataSource);

     FJSONArray := FDataSource.DataSet.ToJSONArray();
     Res.Send<TJSONArray>(FJSONArray);
   Finally
    //criar msg horse
   End;
end;

procedure TViewControllerEndereco.Post(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  try
    try
      FBody := Req.Body<TJSONObject>;

      FController
        .FactoryEntidade
          .DAOEndereco
            .This
              .Cep         (FBody.GetValue<String> ('cep'))
              .IBGE        (FBody.GetValue<Integer>('ibge'))
              .TipoEndereco(FBody.GetValue<String> ('tipoendereco'))
              .Endereco    (FBody.GetValue<String> ('endereco'))
              .Bairro      (FBody.GetValue<String> ('bairro'))
            .&End
          .Post
          .DataSet(FDataSource);
  except
    raise Exception.Create(' ao tentar incluir registro!');
  end;
    try
      FController
        .FactoryEntidade
          .DAONumero
            .This
              .IdEndereco (FDataSource.DataSet.FieldByName('id').AsInteger)
              .Numero     (FBody.GetValue<String>('numero'))
              .Complemento(FBody.GetValue<String>('complemento'))
          .&End
          .Post
          .DataSet(FDataSource);
    except
      raise Exception.Create(' ao tentar incluir registro!');
    end;

    finally
    //informar msg de resposta do Horse, ver como funciona
  end;
end;

procedure TViewControllerEndereco.Put(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  try
    try
      FBody := Req.Body<TJSONObject>;

      FController
        .FactoryEntidade
          .DAOEndereco
            .This
              .Id          (Req.Params['id'].ToInt64)
              .Cep         (FBody.GetValue<String>   ('cep'))
              .IBGE        (FBody.GetValue<Integer>  ('ibge'))
              .TipoEndereco(FBody.GetValue<String>   ('tipoendereco'))
              .Endereco    (FBody.GetValue<String>   ('endereco'))
              .Bairro      (FBody.GetValue<String>   ('bairro'))
            .&End
          .Put;
  except
    raise Exception.Create(' ao tentar atualizar registro');
  end;
  finally
    //informar msg de resposta do Horse, ver como funciona sucesso
  end;
end;

procedure TViewControllerEndereco.Delete(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  try
    try
      FController
        .FactoryEntidade
          .DAOEndereco
            .This
              .Id(Req.Params['id'].ToInt64)
            .&End
          .Delete;
    except
      raise Exception.Create(' ao tentar excluir registro');
    End;
  Finally
    //informar msg de resposta do Horse, ver como funciona
  End;
end;

procedure TViewControllerEndereco.Registry;
begin
  THorse
      .Group
        .Prefix  ('bmw')
          .Get   ('/enderecos/:id' , GetbyId)
          .Get   ('/enderecos'     , GetAll)
          .Post  ('enderecos'      , Post)
          .Put   ('enderecos/:id'  , Put)
          .Delete('enderecos/:id'  , Delete);
end;

end.
