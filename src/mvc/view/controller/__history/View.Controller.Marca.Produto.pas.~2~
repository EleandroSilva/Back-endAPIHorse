unit View.Controller.Marca.Produto;

interface

uses
  System.SysUtils,
  System.JSON,

  Data.DB,

  FireDAC.Comp.Client,

  DataSet.Serialize,
  Horse,
  Horse.BasicAuthentication,

  Controller.Interfaces,
  Imp.Controller;

type
  TViewControllerMarcaProduto = class
    private
      FTexto      : String;
      FJSONArray  : TJSONArray;
      FBody       : TJSONValue;
      FDataSource : TDataSource;
      FController : iController;

      procedure GetAll (Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure GetbyId(Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure Post   (Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure Put    (Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure Delete (Req: THorseRequest; Res: THorseResponse; Next : TProc);

      procedure Registry;
    public
      constructor Create;
      destructor Destroy; override;
  end;

implementation

{ TViewControllerMarcaProduto }

constructor TViewControllerMarcaProduto.Create;
begin
  FController := TController.New;
  FDataSource := TDataSource.Create(nil);
  Registry;
end;

destructor TViewControllerMarcaProduto.Destroy;
begin
  FreeAndNil(FDataSource);
  inherited;
end;

procedure TViewControllerMarcaProduto.GetAll(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  try
    try
      if Req.Query.Field('nome').AsString<>'' then
        FController
          .FactoryEntidade
            .DAOMarcaProduto
              .This
                .Nome(Req.Query.Field('Nome').AsString)
              .&End
            .GetbyParams
            .DataSet(FDataSource)
      else
        FController
          .FactoryEntidade
            .DAOMarcaProduto
              .GetAll
              .DataSet(FDataSource);

     FJSONArray := FDataSource.DataSet.ToJSONArray();
     FTexto     := FJSONArray.ToString;
     Res.Send<TJSONArray>(FJSONArray);
    except
     raise Exception.Create(' ao tentar encontrar registro de Usuário!');
   End;
  finally
    //informar msg de resposta do Horse, ver como funciona
  end;
end;

procedure TViewControllerMarcaProduto.GetbyId(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  Try
     try
       FController
         .FactoryEntidade
           .DAOMarcaProduto
             .GetbyId(Req.Params['id'].ToInt64)
             .DataSet(FDataSource);

       FJSONArray := FDataSource.DataSet.ToJSONArray();
       Res.Send<TJSONArray>(FJSONArray);
   except
     raise Exception.Create(' ao tentar encontrar registro');
   End;
   Finally
     //informar msg de resposta do Horse, ver como funciona
   End;
end;

procedure TViewControllerMarcaProduto.Post(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  try
    try
      FBody := Req.Body<TJSONObject>;

      FController
        .FactoryEntidade
          .DAOMarcaProduto
            .This
              .IdEmpresa(FBody.GetValue<integer>('idempresa'))
              .Nome     (FBody.GetValue<String> ('nome'))
              .Ativo    (FBody.GetValue<integer>('ativo'))
            .&End
          .Post;
  except
    raise Exception.Create(' ao tentar incuir registro!');
  end;
  finally
    //informar msg de resposta do Horse, ver como funciona
  end;
end;

procedure TViewControllerMarcaProduto.Put(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  try
    try
      FBody := Req.Body<TJSONObject>;

      FController
        .FactoryEntidade
          .DAOMarcaProduto
            .This
              .Id       (Req.Params['id'].ToInt64)
              .IdEmpresa(FBody.GetValue<Integer>('idempresa'))
              .Nome     (FBody.GetValue<String> ('nome'))
              .Ativo    (FBody.GetValue<Integer>('ativo'))
            .&End
          .Put;
  except
    raise Exception.Create(' ao tentar atualizar registro');
  end;
  finally
    //informar msg de resposta do Horse, ver como funciona sucesso
  end;
end;

procedure TViewControllerMarcaProduto.Delete(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  try
    try
      FController
        .FactoryEntidade
          .DAOMarcaProduto
            .This
              .Id(Req.Params['id'].ToInt64)
            .&End
          .Delete;
    except
      raise Exception.Create(' ao tentar excluir registro');
    End;
  Finally
    //informar msg de resposta do Horse, ver como funciona
  End;
end;

procedure TViewControllerMarcaProduto.Registry;
begin
  THorse
      .Group
      .Prefix('ess')
      .Get('/grupoprodutos'       , GetAll)
      .Get('/grupoprodutos/:id'   , GetbyId)
      .Post('grupoprodutos'       , Post)
      .Put('grupoprodutos/:id'    , Put)
      .Delete('grupoprodutos/:id' , Delete);
end;


implementation

end.
