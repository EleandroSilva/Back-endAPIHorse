{*******************************************************}
{                    API PDV - JSON                     }
{                      Be More Web                      }
{          Início do projeto 13/03/2024 17:18           }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2024                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit View.Controller.Empresa;

interface

uses
  System.Classes,
  System.SysUtils,
  System.JSON,
  Vcl.StdCtrls,
  Data.DB,
  FireDAC.Comp.Client,
  DataSet.Serialize,
  Horse,
  Horse.BasicAuthentication,
  Controller.Interfaces;
type
  TViewControllerEmpresa = class
    private
      FController : iController;
      FError      : Boolean;
      FIdEmpresa  : Integer;
      FCNPJ       : String;
      //Json empresa-->tabela pai
      FJSONObjectEmpresa  : TJSONObject;
      FJSONArrayEmpresa   : TJSONArray;
      FDSEmpresa          : TDataSource;
      FQuantidadeRegistro : Integer;
      //procedure
      procedure GetAll (Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure GetbyId(Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure Post   (Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure Put    (Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure Delete (Req: THorseRequest; Res: THorseResponse; Next : TProc);
      //loop
      procedure LoopEmpresa;
      function LoopEnderecoEmpresa : TJSONValue;
      function LoopEmailEmpresa    : TJSONValue;
      function LoopTelefoneEmpresa : TJSONValue;
      //function verificar se esta vindo usuario para ser cadastrado junto com empresa
      function CadastrarUsuario : Boolean;
      //cadastrando dependências
      function CadastrarEmpresa(Value : TJSONObject) : Boolean;
      function AlterarEmpresa(Value : TJSONObject) : Boolean;
      procedure Registry;
    public
      constructor Create;
      destructor Destroy; override;
  end;

implementation

uses
  Imp.Controller;

constructor TViewControllerEmpresa.Create;
begin
  FController := TController.New;
  FDSEmpresa  := TDataSource.Create(nil);
  Registry;
end;

destructor TViewControllerEmpresa.Destroy;
begin
  inherited;
end;

procedure TViewControllerEmpresa.LoopEmpresa;
begin
  FJSONArrayEmpresa := TJSONArray.Create;//JSONArray tabela pai empresa
  FDSEmpresa.DataSet.First;
  while not FDSEmpresa.DataSet.Eof do
  begin
    FIdEmpresa := FDSEmpresa.DataSet.FieldByName('id').AsInteger;
    FJSONObjectEmpresa := TJSONObject.Create;//JSONObject tabela pai empresa
    try
      FJSONObjectEmpresa := FDSEmpresa.DataSet.ToJSONObject;
    except
      on E: Exception do
      begin
        WriteLn('Erro ao converter DataSet para JSONObject: ' + E.Message);
        Break;
      end;
    end;

    try
      FJSONObjectEmpresa.AddPair('endereco' , LoopEnderecoEmpresa);
    except
      on E: Exception do
      begin
        WriteLn('Erro durante o loop de endereços da empresa, verificar as instruções SQL no DAOEnderecoempresa: ' + E.Message);
        Break;
      end;
    end;

    Try
      FJSONObjectEmpresa.AddPair('emailempresa'    , LoopEmailEmpresa);
    except
      on E: Exception do
        WriteLn('Erro durante o loop de Email da empresa: ' + E.Message);
    End;

    try
      FJSONObjectEmpresa.AddPair('telefoneempresa' , LoopTelefoneEmpresa);
    except
      on E: Exception do
        WriteLn('Erro durante o loop de Telefone da empresa: ' + E.Message);
    end;

    FJSONArrayEmpresa.Add(FJSONObjectEmpresa);
    FDSEmpresa.DataSet.Next;
  end;
end;

//loopEndereco
function TViewControllerEmpresa.LoopEnderecoEmpresa : TJSONValue;
begin
  Result := FController
              .FactoryCadastro
                .CadastrarEnderecoEmpresa
                .EnderecoEmpresa
                  .IdEmpresa(FIdEmpresa)
                .&End
                .LoopEnderecoEmpresa;
end;

//Email
function TViewControllerEmpresa.LoopEmailEmpresa : TJSONValue;
begin
  Result := FController
              .FactoryCadastro
                .CadastrarEmailEmpresa
                  .EmailEmpresa
                    .IdEmpresa(FIdEmpresa)
                  .&End
                  .LoopEmailEmpresa;
end;

//Telefone
function TViewControllerEmpresa.LoopTelefoneEmpresa: TJSONValue;
begin
  Result := FController
              .FactoryCadastro
                .CadastrarTelefoneEmpresa
                  .TelefoneEmpresa
                    .IdEmpresa(FIdEmpresa)
                  .&End
                  .LoopTelefoneEmpresa;
end;


procedure TViewControllerEmpresa.GetAll(Req: THorseRequest; Res: THorseResponse; Next: TProc);
var
  lQuantidadeRegistro : Integer;
begin
  lQuantidadeRegistro := 0;
  try
    if Req.Query.Field('cnpj').AsString<>'' then
      lQuantidadeRegistro := FController
                                .FactoryEntidade
                                  .DAOEmpresa
                                  .GetbyCNPJ(Req.Query.Field('cnpj').AsString)
                                  .DataSet(FDSEmpresa)
                                  .QuantidadeRegistro
      else
     if Req.Query.Field('nomeempresarial').AsString<>'' then
      lQuantidadeRegistro := FController
                                .FactoryEntidade
                                  .DAOEmpresa
                                    .This
                                      .NomeEmpresarial(Req.Query.Field('nomeempresarial').AsString)
                                    .&End
                                  .GetbyParams
                                  .DataSet(FDSEmpresa)
                                  .QuantidadeRegistro
    else
      lQuantidadeRegistro := FController
                                .FactoryEntidade
                                  .DAOEmpresa
                                  .GetAll
                                  .DataSet(FDSEmpresa)
                                  .QuantidadeRegistro;
  except
    on E: Exception do
    begin
      Res.Status(500).Send('Ocorreu um erro interno no servidor: '+ E.Message);
      Exit;
    end;
  end;

  if not FDSEmpresa.DataSet.IsEmpty then
  begin
    LoopEmpresa;
      if lQuantidadeRegistro > 1 then
        Res.Send<TJSONArray>(FJSONArrayEmpresa) else
        Res.Send<TJSONObject>(FJSONObjectEmpresa);

    Res.Status(201).Send('Registro encontrado com sucesso!');
  end
  else
    Res.Status(400).Send('Registro não encontrado!');
end;

procedure TViewControllerEmpresa.GetbyId(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  Try
    FController
      .FactoryEntidade
        .DAOEmpresa
          .GetbyId(Req.Params['id'].ToInt64)
        .DataSet(FDSEmpresa);


    FJSONObjectEmpresa := FDSEmpresa.DataSet.ToJSONObject();
    Res.Send<TJSONObject>(FJSONObjectEmpresa);
  except
    on E: Exception do
    begin
      Res.Status(500).Send('Ocorreu um erro interno no servidor: ' + E.Message);
      Exit;
    end;
  end;

  if not FDSEmpresa.DataSet.IsEmpty then
  begin
    LoopEmpresa;

    Res.Send<TJSONObject>(FJSONObjectEmpresa);
    Res.Status(201).Send('Registro encontrado com sucesso!');
  end
  else
    Res.Status(400).Send('Registro não encontrado!');
end;


//Cadastrando empresa
function TViewControllerEmpresa.CadastrarEmpresa(Value : TJSONObject): Boolean;
begin
  Result := False;
  //Obtém os dados JSON do corpo da requisição da tabela('empresa')
  Result := FController
              .FactoryCadastro
                .CadastrarEmpresa
                  .GetbyCNPJ(FCNPJ)
                  .JSONObjectPai(Value)
                  .Post
                  .Encontrei;

  FError := FController
              .FactoryCadastro
                .CadastrarEmpresa
                .Error;
end;

//Alterar empresa
function TViewControllerEmpresa.AlterarEmpresa(Value: TJSONObject): Boolean;
begin
  Result := False;
  //Obtém os dados JSON do corpo da requisição da tabela('empresa')
  Result := FController
              .FactoryCadastro
                .CadastrarEmpresa
                  .GetbyId(FIdEmpresa)
                  .JSONObjectPai(Value)
                  .Put
                  .Encontrei;

  FError := FController
              .FactoryCadastro
                .CadastrarEmpresa
                .Error;
end;

procedure TViewControllerEmpresa.Post(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  //Lê os dados JSON da requisição (tabela pai='empresa')
  FJSONObjectEmpresa := TJSONObject.ParseJSONValue(Req.Body) as TJSONObject;
  FCNPJ              := FJSONObjectEmpresa.GetValue('cnpj').Value;
  FController.FactoryEntidade.Uteis.ValidaCnpjCeiCpf(FCNPJ, True);
  FJSONObjectEmpresa := Req.Body<TJSONObject>;

  if CadastrarEmpresa(FJSONObjectEmpresa) Then
  begin
    Res.Status(404).Send('Este registro já consta em nossa base de dados!');
    Exit;
  end
  else
    if FError then
    begin
      Res.Status(500).Send('Ocorreu um erro interno no servidor!');
      Exit;
    end
    else
      Res.Status(201).Send('Registro incluído com sucesso!');
end;

procedure TViewControllerEmpresa.Put(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  FJSONObjectEmpresa := Req.Body<TJSONObject>; //Tabela Pai Empresa
  FIdEmpresa := Req.Params['id'].ToInt64;
  if not AlterarEmpresa(FJSONObjectEmpresa) then
  begin
    Res.Status(204).Send('Registro não encontrado!');
    Exit;
  end
  else
    if FError then
    begin
      Res.Status(500).Send('Ocorreu um erro interno no servidor!');
      Exit;
    end
    else
      Res.Status(201).Send('Registro alterado com sucesso!');
end;

procedure TViewControllerEmpresa.Delete(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  FIdEmpresa := Req.Params['id'].ToInt64;//Tabela Pai Empresa
  if FController
       .FactoryCadastro
         .CadastrarEmpresa
           .Empresa
             .Id(FIdEmpresa)
           .&End
         .Delete
         .Error then
   Res.Status(500).Send('Ocorreu um erro interno no servidor!')
   else
   Res.Status(201).Send('Registro excluído com sucesso!');
end;

//cadastrando usuario
function TViewControllerEmpresa.CadastrarUsuario: Boolean;
begin
  Result := FController
              .FactoryCadastro
                .CadastrarUsuario
                  .Usuario
                    .IdEmpresa(FIdEmpresa)
                  .&End
                .JSONObjectPai(FJSONObjectEmpresa)
                .Post
                .Error(False);
end;

procedure TViewControllerEmpresa.Registry;
begin
  THorse
      .Group
        .Prefix  ('bmw')
          .Get   ('/empresa'     , GetAll)
          .Get   ('/empresa/:id' , GetbyId)
          .Post  ('empresa'      , Post)
          .Put   ('empresa/:id'  , Put)
          .Delete('empresa/:id'  , Delete);
end;

end.
