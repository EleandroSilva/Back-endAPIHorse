{*******************************************************}
{                    API PDV - JSON                     }
{                      ES Sistemas                      }
{          Início do projeto 19/03/2024 22:59           }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2024                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit View.Controller.Produto;

interface

uses
  System.SysUtils,
  System.JSON,

  Data.DB,

  FireDAC.Comp.Client,

  DataSet.Serialize,
  Horse,
  Horse.BasicAuthentication,

  Controller.Interfaces,
  Imp.Controller;

type
  TViewControllerProduto = class
    private
      FTexto      : String;
      FJSONArray  : TJSONArray;
      FBody       : TJSONValue;
      FDataSource : TDataSource;
      FController : iController;

      procedure GetAll (Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure GetbyId(Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure Post   (Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure Put    (Req: THorseRequest; Res: THorseResponse; Next : TProc);
      procedure Delete (Req: THorseRequest; Res: THorseResponse; Next : TProc);

      procedure Registry;
    public
      constructor Create;
      destructor Destroy; override;
  end;

implementation

constructor TViewControllerProduto.Create;
begin
  FController := TController.New;
  FDataSource := TDataSource.Create(nil);
  Registry;
end;

destructor TViewControllerProduto.Destroy;
begin
  FreeAndNil(FDataSource);
  inherited;
end;

procedure TViewControllerProduto.GetAll(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  try
    try
      if ((Req.Query.Field('nome').AsString<>'') or (Req.Query.Field('gtin').AsString<>'')
      or (Req.Query.Field('ceantrib').AsString<>'') or (Req.Query.Field('cean').AsString<>'')) then
        FController
          .FactoryEntidade
            .DAOProduto
              .This
                .Nome(Req.Query.Field('Nome').AsString)
                .Gtin(Req.Query.Field('gtin').AsString)
                .cEanTrib(Req.Query.Field('ceantrib').AsString)
                .cEan(Req.Query.Field('cean').AsString)
              .&End
            .GetbyParams
            .DataSet(FDataSource)
      else
        FController
          .FactoryEntidade
            .DAOProduto
              .GetAll
              .DataSet(FDataSource);

     FJSONArray := FDataSource.DataSet.ToJSONArray();
     FTexto     := FJSONArray.ToString;
     Res.Send<TJSONArray>(FJSONArray);
    except
     raise Exception.Create(' ao tentar encontrar registro de produto!');
   End;
  finally
    //informar msg de resposta do Horse, ver como funciona
  end;
end;

procedure TViewControllerProduto.GetbyId(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  Try
     try
       FController
         .FactoryEntidade
           .DAOProduto
             .GetbyId(Req.Params['id'].ToInt64)
             .DataSet(FDataSource);

       FJSONArray := FDataSource.DataSet.ToJSONArray();
       Res.Send<TJSONArray>(FJSONArray);
   except
     raise Exception.Create(' ao tentar encontrar registro de produto');
   End;
   Finally
     //informar msg de resposta do Horse, ver como funciona
   End;
end;

procedure TViewControllerProduto.Post(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  try
    try
      FBody := Req.Body<TJSONObject>;

      FController
        .FactoryEntidade
          .DAOProduto
            .This
              .IdEmpresa            (FBody.GetValue<integer>  ('idempresa'))
              .IdCategoria          (FBody.GetValue<integer>  ('idcategoria'))
              .IdUnidade            (FBody.GetValue<integer>  ('idunidade'))
              .Gtin                 (FBody.GetValue<String>   ('gtin'))
              .cEanTrib             (FBody.GetValue<String>   ('nome'))
              .cEan                 (FBody.GetValue<String>   ('cean'))
              .Nome                 (FBody.GetValue<String>   ('nome'))
              .NCM                  (FBody.GetValue<integer>  ('ncm'))
              .PrecoCusto           (FBody.GetValue<Currency> ('precocusto'))
              .AliquotaLucro        (FBody.GetValue<Currency> ('aliquotalucro'))
              .PrecoVendaGelado     (FBody.GetValue<Currency> ('precovendagelado'))
              .PrecoVendaNatural    (FBody.GetValue<Currency> ('precovendanatural'))
              .PrecoVendaPromocional(FBody.GetValue<Currency> ('precovendapromocional'))
              .EstoqueAnterior      (FBody.GetValue<Currency> ('estoqueanterior'))
              .EstoqueMaximo        (FBody.GetValue<Currency> ('estoquemaximo'))
              .EstoqueMinimo        (FBody.GetValue<Currency> ('estoqueminimo'))
              .EstoqueAtual         (FBody.GetValue<Currency> ('estoqueatual'))
              .Origem               (FBody.GetValue<integer>  ('origem'))
              .Volume               (FBody.GetValue<integer>  ('volume'))
              .QuantidadeEmbalagem  (FBody.GetValue<integer>  ('quantidadeembalagem'))
              .Balanca              (FBody.GetValue<integer>  ('balanca'))
              .PesoLiquido          (FBody.GetValue<Currency> ('pesoliquido'))
              .PesoBruto            (FBody.GetValue<Currency> ('pesobruto'))
              .Ativo                (FBody.GetValue<integer>  ('ativo'))
            .&End
          .Post;
  except
    raise Exception.Create(' ao tentar incuir registro no cadastro de produtos!');
  end;
  finally
    //informar msg de resposta do Horse, ver como funciona
  end;
end;

procedure TViewControllerProduto.Put(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  try
    try
      FBody := Req.Body<TJSONObject>;

      FController
        .FactoryEntidade
          .DAOProduto
            .This
              .Id                   (Req.Params['id'].ToInt64)
              .IdEmpresa            (FBody.GetValue<integer>  ('idempresa'))
              .IdCategoria          (FBody.GetValue<integer>  ('idcategoria'))
              .IdUnidade            (FBody.GetValue<integer>  ('idunidade'))
              .Gtin                 (FBody.GetValue<String>   ('gtin'))
              .cEanTrib             (FBody.GetValue<String>   ('nome'))
              .cEan                 (FBody.GetValue<String>   ('cean'))
              .Nome                 (FBody.GetValue<String>   ('nome'))
              .NCM                  (FBody.GetValue<integer>  ('ncm'))
              .PrecoCusto           (FBody.GetValue<Currency> ('precocusto'))
              .AliquotaLucro        (FBody.GetValue<Currency> ('aliquotalucro'))
              .PrecoVendaGelado     (FBody.GetValue<Currency> ('precovendagelado'))
              .PrecoVendaNatural    (FBody.GetValue<Currency> ('precovendanatural'))
              .PrecoVendaPromocional(FBody.GetValue<Currency> ('precovendapromocional'))
              .EstoqueAnterior      (FBody.GetValue<Currency> ('estoqueanterior'))
              .EstoqueMaximo        (FBody.GetValue<Currency> ('estoquemaximo'))
              .EstoqueMinimo        (FBody.GetValue<Currency> ('estoqueminimo'))
              .EstoqueAtual         (FBody.GetValue<Currency> ('estoqueatual'))
              .Origem               (FBody.GetValue<integer>  ('origem'))
              .Volume               (FBody.GetValue<integer>  ('volume'))
              .QuantidadeEmbalagem  (FBody.GetValue<integer>  ('quantidadeembalagem'))
              .Balanca              (FBody.GetValue<integer>  ('balanca'))
              .PesoLiquido          (FBody.GetValue<Currency> ('pesoliquido'))
              .PesoBruto            (FBody.GetValue<Currency> ('pesobruto'))
              .Ativo                (FBody.GetValue<integer>  ('ativo'))
            .&End
          .Put;
  except
    raise Exception.Create(' ao tentar atualizar registro do cadastro de produtos');
  end;
  finally
    //informar msg de resposta do Horse, ver como funciona sucesso
  end;
end;

procedure TViewControllerProduto.Delete(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  try
    try
      FController
        .FactoryEntidade
          .DAOProduto
            .This
              .Id(Req.Params['id'].ToInt64)
            .&End
          .Delete;
    except
      raise Exception.Create(' ao tentar excluir registro do cadastro de produtos');
    End;
  Finally
    //informar msg de resposta do Horse, ver como funciona
  End;
end;

procedure TViewControllerProduto.Registry;
begin
  THorse
      .Group
      .Prefix('bmw')
      .Get   ('produtos'     , GetAll)
      .Get   ('produtos/:id' , GetbyId)
      .Post  ('produtos'     , Post)
      .Put   ('produtos/:id' , Put)
      .Delete('produtos/:id' , Delete);
end;

end.
