{*******************************************************}
{                    API PDV - JSON                     }
{                      ES Sistemas                      }
{          Início do projeto 18/03/2024 13:39           }
{                 www.bemoreweb.com.br                  }
{                     (17)98169-5336                    }
{                        2003/2024                      }
{         Analista desenvolvedor (Eleandro Silva)       }
{*******************************************************}
unit View.Controller.Buscar.Cep;

interface

uses
  System.SysUtils,
  System.JSON,

  ViaCEP.Intf,
  ViaCEP.Core,
  ViaCEP.Model,

  DataSet.Serialize,
  Horse,
  Horse.BasicAuthentication;

type
  TViewControllerBuscarCep = class
    private
      FTexto     : String;
      FJSONArray : TJSONArray;
      FBody      : TJSONValue;
      FViaCEP    : IViaCEP;
      FCEP       : TViaCEPClass;
      procedure GetAll (Req: THorseRequest; Res: THorseResponse; Next : TProc);

      procedure Registry;
    public
      constructor Create;
      destructor Destroy; override;
  end;

implementation

{ TViewControllerBuscarCep }

constructor TViewControllerBuscarCep.Create;
begin
  FViaCEP    := TViaCEP.Create;
  FJSONArray := TJSONArray.Create;
  Registry;
end;

destructor TViewControllerBuscarCep.Destroy;
begin
  inherited;
end;

procedure TViewControllerBuscarCep.GetAll(Req: THorseRequest; Res: THorseResponse; Next: TProc);
begin
  FCEP := FViaCEP.Get(Req.Query.Field('cep').AsString);
  if not Assigned(FCEP) then
    Exit; // Aqui você pode exibir uma mensagem para o usuário falando que o CEP não foi encontrado.
  try
    //FJSONArray.ToJSON<FCep.ToString>;
    Res.Send<TJSONArray>(FJSONArray);
  finally
    FCEP.Free;
  end;
end;

procedure TViewControllerBuscarCep.Registry;
begin
  THorse
      .Group
        .Prefix('bmw')
          .Get ('/ceps' , GetAll);
end;

end.
